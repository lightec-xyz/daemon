package circuits

import (
	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark/std/algebra/emulated/sw_bn254"
	"github.com/consensys/gnark/std/recursion/plonk"
	"github.com/consensys/gnark/test"
	ethcommon "github.com/ethereum/go-ethereum/common"
	"github.com/lightec-xyz/btc_provers/circuits/blockchain"
	"github.com/lightec-xyz/btc_provers/circuits/blockchain/levelcommon"
	"github.com/lightec-xyz/btc_provers/circuits/blockdepth"
	depthCommon "github.com/lightec-xyz/btc_provers/circuits/blockdepth/common"
	"github.com/lightec-xyz/btc_provers/circuits/blockdepth/recursivebulks"
	"github.com/lightec-xyz/btc_provers/circuits/blockdepth/timestamp"
	"github.com/lightec-xyz/btc_provers/circuits/txinchain"
	blockdepthUtil "github.com/lightec-xyz/btc_provers/utils/blockdepth"
	"github.com/lightec-xyz/btc_provers/utils/client"
	txinchainUtil "github.com/lightec-xyz/btc_provers/utils/txinchain"
	"github.com/lightec-xyz/daemon/common"
	"github.com/lightec-xyz/daemon/rpc"
	"github.com/ybbus/jsonrpc/v3"
	"net/http"
	"testing"
	"time"
)

var SetupDir = "/opt/lightec/opt2/circuitsetup/devnet"
var url = common.GetBtcUrl()
var User = common.GetBtcUser()
var Pass = common.GetBtcPwd()

func TestCircuit_BtcDepositProve(t *testing.T) {
	assert := test.NewAssert(t)
	testsig := ethcommon.FromHex("3f8e02c743e76a4bd655873a428db4fa2c46ac658854ba38f8be0fbbf9af9b2b6b377aaaaf231b6b890a5ee3c15a558f1ccc18dae0c844b6f06343b88a8d12e3")
	testaddr := ethcommon.FromHex("0x79e0F79F395CEcF90812ee7beFB883D7210e20E8")
	icpPublicKey := ethcommon.FromHex("02971351ad0a4e80b4d61003a152c746bde6d7ac5cba52466727c611fdc8c20f5b")

	blockDepthsCircuitFile, err := blockdepth.GetCircuitFiles(SetupDir)
	assert.NoError(err)

	timestampCircuitFile, err := timestamp.GetCircuitFile(SetupDir)
	assert.NoError(err)
	circuit, err := txinchain.NewDepositTxCircuit[sw_bn254.ScalarField, sw_bn254.G1Affine, sw_bn254.G2Affine, sw_bn254.GTEl](
		SetupDir, blockDepthsCircuitFile, timestampCircuitFile, [33]byte(icpPublicKey))
	assert.NoError(err)

	httpClient := &http.Client{Timeout: 3 * time.Minute}
	cl := client.NewJsonRpcClient(url, User, Pass, &jsonrpc.RPCClientOpts{HTTPClient: httpClient})

	genesisBlockHeight := uint32(78624)
	latestBlockHeight := uint32(85193)
	cpBlockHeight := uint32(83729)
	txid := "ee1dca4fabbe52dd59d91e72b3f8668aa9a2336a43fc52b6bd8a81078a0660d8"
	txBlkHash := "000000000000000349d9d80c546972ade8fe42298a29e76af5ec8604c4b4b646" //74755

	smooth, err := blockdepthUtil.GetSmoothedTimestampProofData(cl, latestBlockHeight)
	assert.NoError(err)
	smoothedTimestamp := smooth.Timestamp

	proofData, err := txinchainUtil.GetTxInChainProofData(cl, txid, txBlkHash, latestBlockHeight, cpBlockHeight, genesisBlockHeight)
	assert.NoError(err)

	blockChainProofFile, _ := HexToProof(rpc.Proof{
		"a6c5f3659f572c14cb06f081d3467ee0dd5068149ee1139e4306bf107c2da042d7b6a386f3bdc36ed19a2e2391a8a932e2800de6af3add9cd3445a1c6a6fd9fac428cde5710d86308fc5cb5975f30584b1b52eea882995d126ce50ec0fc867b0c661ee20cb0d21a07875174878e946457615156aec5512d1c3f10c883dfe28978d4afae7498cc6875e44c7e97b1b95320186ee7c7d53e9c8d8cc33ac8800eec9eb3e3a3de3732490ddc97389e0fba103f7d6f3c8ab3ddaaaa0daf331dd46789cd62a11ec822b89ead9c6ec6e46e7e1bf3bdcb05f03c1cf08972fe49ee41b07e7cdc7ee0ea89a9e5e90cbbe4b31bc1727e42d2766bbac0ce84290b4e2e163090d00000007198b1a23a7379f16fd3e31545310481e3479743ee9785eb9b0b5bb260c80be2a2928a28f8c37c6c2323394afc5f88e3afed430a32cf344fb389f460071ebc87d1e3d3c92e07686adba26aacde79deca0cac800cfc3615834ac91123985f33fa517083a1e220033ad5f7f3eb9b88240e8f3daf6ec7dc02181e211903b509d145b17ea59bda6c8c0ab0931c6a19a513f78822de5962e88cb1c7bedccbaaac11ac72905d05294fa49c6cde8397be5ecc9dda842b65bb855a25cc83bf852749308af0e29b8ca6b151c72d827108857ad3ce42d21c6df16524b684704dc2014a5895ceb5b00fc1d6db955caa38ad151abe9f07238badbc791b177ad541901949097580f08d7acc8b27224ed7297847856fbfd5c51c00b378c1ff11028351dc78cfabf00000001d72d1b640f6229d14dc0287fdaf790bf05ca56994e5f48e2fa81c868d781e35f",
		"0000001f000000000000001f0000000000000000000000000000000076229392c55e68db573103db66f61d8d00000000000000000000000000000000f5eb840b71db0bc53966c0e500000000000000000000000000000000000000000e31df2bda58724720deb71b99fbdd6400000000000000000000000000000000b3d8edbf52108c32f8fb0e000000000001b92c8a49ea5831fc1393afa650c9caa9020e0b8a8afedc842dfa258e7c01a02fe0e9d7bd4ed3c1228ccebd882de76c65d5cb43fd60b8789263e411991a156b2e2adc0fb648a66a932011b9801bea213c1c3e88ec9b741d7692da5f71cdddae132fdf03b20d92069ed446a0ca750bf8c94cbd6c337decbca28e25393eb0c9cf0a6b8dd8c32eb15b4becdaa44198bd871c503d84c16cf9a7c57e199e4bb92baa2cfaba7ea4772f98bcaf9d8d24e007cf552303f27c5c39ec34f0b732b23627b012acb4058260d92611730562ec2d8a6516a005ae90e6449405f3ec593b6d4bd8136abdcf0520f2ce0db0ad39fdc6db3f4cf3e89bc797c460ac6b9cdfe765bcd528fdc1e4f7d30a7dfdac79c5231c66e1b55aa14c6db55b75a408f91e3d3a985804fa182712571c15e5739df208420643492a356643c1bde2204deff918205c5a29094286532bdbac041ba6f05c8212ff98997fb8e33d4f42748383466246c2dc2d864f33221d46ab4bb5019de7afb06e72bf88a70036b1bc885ebdb6d48d03311819221c36576aefb088ef6d25536bc038947626656a8d381c096e67a2c8233c1383cbc38d74ff29678853f0e765b8eaa8617aee21731c1dc55310975182a250253ca15f604a70e5011fe87e5e280aa470942fe92e4f1f088e2d99473d5881a9273fb769d3ad71f495a098d4356118fafc4093ff206486a918b3e683149acaa62aff51394c628f4002505b55fd4dcfe8a6791c6623d72153b0f31f08370e41e610544b0d364ed203be3c14d93e0a7dd4332de0851a6401265da2e067b0676ab200000000000000000000000000000000000000000000000000000000000000ff00000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d00000000000000000000000000000000000000000000000000000000683d2c89000000000000000000000000000000000000000000000000000000006843094e000000000000000000000000000000006551889f24c420dd84c293afea5ea2ef0000000000000000000000000000000045cd40a7b18bd542010000000000000000000000000000000000000000000000000000000000000000000000000019aa",
	})
	blockChainVkey := blockchain.GetHybridVKey(SetupDir, 11)

	txProof, _ := HexToProof(rpc.Proof{
		"c1ee8598b33b80191bb3138278d488d97a0a51a509dd8fa6a9689455010b54288b99c83e4f2e02dda398722f68a4fd8122925bf027104afba989c6ad05834aafdf36ee258ab8ef8828cfc29d9072ba837ca33788e97fb8e690a9ce3cfdf28dafcdb6f362be4e9d966db9cb9e1d6a1a920a7b6eba033b7050069c6b20ddcce93cd6df360f32f0e87efd6176ea32d7a75abd9efe7dc8647ec18cb1c00ba87bda50ebe36c7c97214f5afb050f2392c27d1ea619f4ed8c3ef3878ac51cd5b9df6c9ecdf38f8c8bd636cba2a7bd579c429ad217acdf67a34dff165131adbbf40d78ade87d88c9c42de604c6e73c065eb305d45e8c6846fce5861006702f2c568aa917000000071ed16aeeceb1f38001165d0a64f65a7df82a49e4d34627812b60681a17778eae12f2963557f3c86c8d8138ce568b0e0b4a041b8854562558459e6c17570f2d590ab7b7425c9e1807cba4313f606573f98f8ebcf005e4797a4497d752467ccd99140a2c8566287aac73f46a047e1040d2ce0513275d5d2ea01fca282f858ca6992a858fe3b41f56802278cebd458c639e6e4641c0687db3ae181b8dbfdce392a80380ef728a3d51e8d6956918589325feab9ea23f35f433cba8ec80ca5092c13c1c5746d9845c0c7656bb6cb9aad3ef89c13276f3e24b1c97b57036766dc7346ba5f26a5d2a0c61b4a9bcc8cb64a5d91139d6c3a4870ecd4b1c11aa50500a0f830314a0adc7983b76453b73a845d14e3cedfc4191f755f30c2d19766507335ecb00000001e28a665bf628ca855dd98b89e61e649bc59fc995d07e6d3b7f18cb526a36af1c",
		"0000001100000000000000110000000000000000000000000000000046b6b4c40486ecf56ae7298a2942fee800000000000000000000000000000000ad7269540cd8d9490300000000000000000000000000000000000000000000000e31df2bda58724720deb71b99fbdd6400000000000000000000000000000000b3d8edbf52108c32f8fb0e00000000001bdfca792dfb8555597ee314ab754fb6e762cbaa7b8b042821fb5f8fb69d3e0229ae1143a5f570681aeddc7294f8f99232e58cfc3d20219531a3097181fad05e2ae89c742705b0e4028319e81da84b23fd408ff0df57adf810c511eb68b22dc2033e7952456b7d4141bc1757d923fd9d61d42459f57cdf6262afad7a3e3d15581464d7d24e15c3b0d4602e6b87e6f4e5c49eec26556a422d907d8bea2d5ac3e21c3b1092b7861bea381e289e215f3b8a9f887a39590c6d3d146036f899b5d06a2762d92719d61db46a7b4f853e14c6e37c1de0dacb477ef96741f9478fb1b4141d051995a3aa01238e3eb7d7dca3cd2becc17765c6d75740b3ef3561f5e2997c06b862e4adcf1417aa3b5df0cd02aa91519c73cea042a08a818702425ee232a42fd2239171f2f166cad0a0b39468d8b8b272dec65759b254e582641498335f93053146e546fe5e0becc78d10e592c32e12b99ca8ecd0ba0f598e3692f40df4eb305d0c686af9712ef133bd9747af2584c760b048228d33727530b0a6aee0c04800000000000000000000000000000000000000000000000000000000000000c0",
	})
	cpProof, _ := HexToProof(rpc.Proof{
		"aa749d4ff020488d6c27fc5044f143d333328e96367d3a614b8b90a874e2143dde7be017d2bd1c7f7e0b5a65a9e9c4d81931bba81ccc1219f800ed6206f18043dce38e145ffdc08ff7c2a29cb8a491247679a3d0dee03072d21fa5ba8c22ae06c424ea06586b89aa7a8d6cace878bc896da6aa0b94e819646438a12986a5e8a4d39a221fea119fb9223a02386f01a2abfa5cc1ea01cdb511dcc3ff462d53abeb8ef3e9e929713aa697278f3f7b90f841009f7324bf790da8167e0378b081ee18994febccd7c03d839ef9152d6b1e34d8df75a4fe3da94d4e254ad3d13339a5c3a0665f5bbd773da1cecb1eb102d1c887efc6b087b157037fca8439cdd34ede130000000700d02ec8e93b8b14e6310ad939551d7829dfc7e1e22587b1ddbdf3917359c5931a064793a5c33bf41b63b66631686c0e0954904098dfab3f40e9a3d09a4449cb2d68eb8182c5c2bf3ddb7207ef35f4068bb9dcebf5688efbd8790136f50231c6261823edec3ad0ee63a939077aaee86b89e080a0d62980db5e435f7bf84f04731f568cba8c720a1d2a396d00930968cd61d2d2e5bb44128d608bbd56606fe25b2a0b2280a8f236f49a29a4a0d59dcf4a8dbea71270fc33254e67ebec716440492f58e12df106f5ce940966b1a143b708b6b00672ab67f2dbead6b5246e2296d7a410acf15eaa5ca7d4aca0327d43f63826675d6790c2580c4e2ffe48ade0b8950e900004d25bd39b05271dcd8da6d45e45b9d3a1af1b1f81e9782813cff1a3f300000001a10e81ace9c7265876db2babd416c4b778f53080cebab9a1829cca1e7f2f2878",
		"000000110000000000000011000000000000000000000000000000007f970752cc5e6af8451babbee0becec700000000000000000000000000000000d0cf31b0f3dd05776d37340000000000000000000000000000000000000000000e31df2bda58724720deb71b99fbdd6400000000000000000000000000000000b3d8edbf52108c32f8fb0e00000000001bdfca792dfb8555597ee314ab754fb6e762cbaa7b8b042821fb5f8fb69d3e0229ae1143a5f570681aeddc7294f8f99232e58cfc3d20219531a3097181fad05e2ae89c742705b0e4028319e81da84b23fd408ff0df57adf810c511eb68b22dc2033e7952456b7d4141bc1757d923fd9d61d42459f57cdf6262afad7a3e3d15581464d7d24e15c3b0d4602e6b87e6f4e5c49eec26556a422d907d8bea2d5ac3e21c3b1092b7861bea381e289e215f3b8a9f887a39590c6d3d146036f899b5d06a2762d92719d61db46a7b4f853e14c6e37c1de0dacb477ef96741f9478fb1b4141d051995a3aa01238e3eb7d7dca3cd2becc17765c6d75740b3ef3561f5e2997c06b862e4adcf1417aa3b5df0cd02aa91519c73cea042a08a818702425ee232a42fd2239171f2f166cad0a0b39468d8b8b272dec65759b254e582641498335f93053146e546fe5e0becc78d10e592c32e12b99ca8ecd0ba0f598e3692f40df4eb305d0c686af9712ef133bd9747af2584c760b048228d33727530b0a6aee0c04800000000000000000000000000000000000000000000000000000000000005b8",
	})
	txDepthProof := depthCommon.DepthProof{
		Proof:             txProof,
		IsRecursive:       true,
		LastAbsorbedDepth: 5,
	}
	cpDepthProof := depthCommon.DepthProof{
		Proof:             cpProof,
		IsRecursive:       true,
		LastAbsorbedDepth: 5,
	}

	txDepthVkey, _ := recursivebulks.GetDepthVey(SetupDir, txDepthProof.IsRecursive, txDepthProof.LastAbsorbedDepth)
	cpDepthVkey, _ := recursivebulks.GetDepthVey(SetupDir, cpDepthProof.IsRecursive, cpDepthProof.LastAbsorbedDepth)

	latestBlkHash, err := cl.GetBlockHash(int64(latestBlockHeight))
	assert.NoError(err)
	sigverifProofData, err := blockdepthUtil.GetSigVerifProofData(latestBlkHash[:], testsig, icpPublicKey)
	assert.NoError(err)

	timestampVkey, err := timestamp.GetVKey(SetupDir)
	assert.NoError(err)

	timestampProof, _ := HexToProof(rpc.Proof{
		"ea7658d0475d15da6c23b65d8d2a92d439caf64a43fd2e7d0185b8e3d4128d659ae0f0a9b7b22f8f68ab12ea162e1c0bc08727019898edfaf640c4c44226fb9da1040f078179ededa821c3d5f9faa539fc7ff4b15efc3eb25ae964c4eb85731ca26c260e1dd8f14cf22c0ad7fe9bd3a5d6722f5c4d21938ffd13dc421d65e68caac182d1e91ee61f678858b91a3b8d65cbc4f28b4700577097a46dc0cb2a49c2912fedca7fb3851189cb6943ea5267ad45f35ecabf012bff8dd123fc112624e6a639a64b191e6ab11fdf962b7a7509614200bd39931183ba6a30c603efe94d2b96472b5dc89160625fa9e89ca6d5b389d912c6485f5dbe62aa7e5ad01e7e9681000000071fb37a91464a0b27520dac53e428d7c3f7808d584804050fca1888a5058e766c02ce3d67669f758f92342d5696cbb869f725014554984e2fd701eb7e848a05e12c726bfd2b68c28b3abf7015990a5af97296eb5eda1455eb0ae8f5126917d6822c15b819b74a43d476e50076e050852fa807542137883e2abaf8bbd1058124de28d77bb0541018cd1dc0595d76f9bfeebd7c672d4fae266af80975496702c5772a3d57adb22ed4cc6ade861fb3b3803d42b36e6d36e3e3fc42dd63432febf5f60d9c4cc44afc6d341acc605954da95cebb124c8a7fe6942ff90e19aea9556b56ea00e3bcfbc62a2046b498394d93c1091bba675a1028aea8006ef9c83ada934807a7b1e3f4aa9afe30c4262911890a9e6a4489dc7dcf2235bcd856d885be0af800000001818c621931b915d0e929c6f22fb9a85193f47697ef9b9384507e1b773553ef07",
		"00000007000000000000000700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000046b6b4c40486ecf56ae7298a2942fee800000000000000000000000000000000ad7269540cd8d949030000000000000000000000000000000000000000000000000000000000000000000000684117960000000000000000000000000000000008fa9e487c4e0f09c387e6f0988f3c68000000000000000000000000000000001cc46b54424ee1c1c1945da000000000000000000000000000000000000000000000000000000000000000006842b811",
	})

	assignment, err := txinchain.NewDepositTxAssignment[sw_bn254.ScalarField, sw_bn254.G1Affine, sw_bn254.G2Affine, sw_bn254.GTEl](
		blockChainVkey, txDepthVkey, cpDepthVkey, timestampVkey,
		blockChainProofFile, txDepthProof.Proof, cpDepthProof.Proof, timestampProof,
		*sigverifProofData,
		proofData,
		testaddr,
		smoothedTimestamp,
		1,
	)
	assert.NoError(err)

	err = test.IsSolved(circuit, assignment, ecc.BN254.ScalarField())
	assert.NoError(err)
}

func TestCircuit_BtcTimestamp(t *testing.T) {
	//btctimestamp_82536_82572
	assert := test.NewAssert(t)
	circuit := timestamp.NewTimestampCircuit()
	cl := client.NewJsonRpcClient(url, User, Pass)
	cptimeProofData, err := blockdepthUtil.GetCpTimestampProofData(cl, 82536)
	assert.NoError(err)
	smoothedTimestampProofData, err := blockdepthUtil.GetSmoothedTimestampProofData(cl, 82838)
	assert.NoError(err)
	assignment, err := timestamp.NewTimestampAssignment(cptimeProofData, smoothedTimestampProofData)
	assert.NoError(err)
	err = test.IsSolved(circuit, assignment, ecc.BN254.ScalarField())
	assert.NoError(err)
}

func TestCircuit(t *testing.T) {
	witness, err := HexToWitness("0000000c000000000000000c00000000000000000000000000000000d08db4027b8f424d01cbe680e8ed3b8b0000000000000000000000000000000002063b2fed2a00c201000000000000000000000000000000000000000000000035325811e9c78be9cfb2db80e52fc0640000000000000000000000000000000015e38ed0165aa493850026b900000000000000000000000000000000000000000000000000000000000000000000010b00000000000000000000000000000000fc4e5b5c36c904c00ac73988ef7e6ead0000000000000000000000000000000034d788fac6fc29a967306d277b1526910000000000000000000000000000000047258a14bea341b27be1e305813ffade00000000000000000000000000000000fa4735eb61ea275603000000000000000000000000000000000000000000000000000000000000000000000067f4a34a000000000000000000000000000000000000000000000000000000000000001500000000000000000000000079e0f79f395cecf90812ee7befb883d7210e20e8")
	if err != nil {
		t.Fatal(err)
	}
	vector := witness.Vector()
	t.Log(vector)
	bigInts, err := HexWitnessToBigInts("0000000c000000000000000c00000000000000000000000000000000d08db4027b8f424d01cbe680e8ed3b8b0000000000000000000000000000000002063b2fed2a00c201000000000000000000000000000000000000000000000035325811e9c78be9cfb2db80e52fc0640000000000000000000000000000000015e38ed0165aa493850026b900000000000000000000000000000000000000000000000000000000000000000000010b00000000000000000000000000000000fc4e5b5c36c904c00ac73988ef7e6ead0000000000000000000000000000000034d788fac6fc29a967306d277b1526910000000000000000000000000000000047258a14bea341b27be1e305813ffade00000000000000000000000000000000fa4735eb61ea275603000000000000000000000000000000000000000000000000000000000000000000000067f4a34a000000000000000000000000000000000000000000000000000000000000001500000000000000000000000079e0f79f395cecf90812ee7befb883d7210e20e8")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(bigInts)
}

func TestHexToPlonkProof(t *testing.T) {
	proof, err := HexToProof(rpc.Proof{
		Proof:   "ea7658d0475d15da6c23b65d8d2a92d439caf64a43fd2e7d0185b8e3d4128d659ae0f0a9b7b22f8f68ab12ea162e1c0bc08727019898edfaf640c4c44226fb9da1040f078179ededa821c3d5f9faa539fc7ff4b15efc3eb25ae964c4eb85731ca26c260e1dd8f14cf22c0ad7fe9bd3a5d6722f5c4d21938ffd13dc421d65e68caac182d1e91ee61f678858b91a3b8d65cbc4f28b4700577097a46dc0cb2a49c2912fedca7fb3851189cb6943ea5267ad45f35ecabf012bff8dd123fc112624e6a639a64b191e6ab11fdf962b7a7509614200bd39931183ba6a30c603efe94d2b96472b5dc89160625fa9e89ca6d5b389d912c6485f5dbe62aa7e5ad01e7e9681000000071fb37a91464a0b27520dac53e428d7c3f7808d584804050fca1888a5058e766c02ce3d67669f758f92342d5696cbb869f725014554984e2fd701eb7e848a05e12c726bfd2b68c28b3abf7015990a5af97296eb5eda1455eb0ae8f5126917d6822c15b819b74a43d476e50076e050852fa807542137883e2abaf8bbd1058124de28d77bb0541018cd1dc0595d76f9bfeebd7c672d4fae266af80975496702c5772a3d57adb22ed4cc6ade861fb3b3803d42b36e6d36e3e3fc42dd63432febf5f60d9c4cc44afc6d341acc605954da95cebb124c8a7fe6942ff90e19aea9556b56ea00e3bcfbc62a2046b498394d93c1091bba675a1028aea8006ef9c83ada934807a7b1e3f4aa9afe30c4262911890a9e6a4489dc7dcf2235bcd856d885be0af800000001818c621931b915d0e929c6f22fb9a85193f47697ef9b9384507e1b773553ef07",
		Witness: "00000007000000000000000700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000046b6b4c40486ecf56ae7298a2942fee800000000000000000000000000000000ad7269540cd8d949030000000000000000000000000000000000000000000000000000000000000000000000684117960000000000000000000000000000000008fa9e487c4e0f09c387e6f0988f3c68000000000000000000000000000000001cc46b54424ee1c1c1945da000000000000000000000000000000000000000000000000000000000000000006842b811",
	})
	if err != nil {
		t.Fatal(err)
	}
	t.Log(proof)
	wit, err := plonk.ValueOfWitness[sw_bn254.ScalarField](proof.Witness)
	if err != nil {
		t.Fatal(err)
	}
	//00000000a05d94c1c1e14e42546bc41c683c8f98f0e687c3090f4e7c489efa08
	elems := wit.Public[timestamp.OffsetOutgoingHash : timestamp.OffsetOutgoingHash+timestamp.CountOutgoingHash]
	hash := getLinkedIdHash(elems)
	t.Logf("%x\n", hash)

}

func TestTxWitness(t *testing.T) {
	proof, err := HexToProof(rpc.Proof{
		Proof:   "aface4fc1543f6ec48e1505265a9bedbdaaccd2b3d7204fcbc0e387181e6367fcf95a4be8bf5dd695da2064dab5f1db1e006c305730d04724f85510743b8819be1c4a33ef073a11cf8c002c2e50d58652d1c6b0e7162b0b8b259370857bdee3c93fc306b7ef5a343da1cefae16959f077843df965e1039106ed4a20c5d61dcb8d8ec5ae4ba33d5e4fafaaa348e12a3de3364a94b0d250f1cf31db93f33e108328673b7b9b4fd0a86dfada24a6181d846bba0f5e8360b9a597ee6edcdc27d2c01895eb0e405192a9aac3ddab5b0cde8eb28f8688d187160cd751ffd1abf1bc2c59958ac282a7abb9754427e12ca36ab551c22b4bdc04255bfd91c153a110cce9f000000072bf771730d2f2c2d857c174dd4d5e47a6c77bdbb9f4c9df902468ca0cb39fcfe21ce1ed14dcf9bb8c37c3c486d84e7818eba75cd1da2d0f2efd82435892e381403c1efb25170918d7881c131b642db0f4c7c2c17f06b366e40ae84a74c4fbe170e5a88ebedba21fce88ffb9d33ba7087a64ec1c79433134f0b9fc892c736eaab0474d08368739f79d5a03e92ab3220829728af22807c748b88d102d44ece69cb257c9cc14efa2679bcce74548030deb0703fc17570e4ef6158309b5c2bbb23190a5bd6de699a35c50c1344ec31e588a2a24f415ca67e9ee645197ec8416d06fda3f3ee1d0b986ab128d44117b942824db36f097c45d8808d68478f42acb4e5d30fe118bf04536adfb072aa765ef280d8c3ceadf33619dbc05d29c5c2a68e27dd00000001a8076a2d73d42edf7fca0a23533a8c325ef2e11fc909c0a5a12eba153d7fb977",
		Witness: "0000001f000000000000001f000000000000000000000000000000001d295d252016197ca6ce9bba7116b59f00000000000000000000000000000000c626e198fe3b0452af4f6db500000000000000000000000000000000000000007ffea3559eb09f57c267f2fcf93d4bb900000000000000000000000000000000c05f29a8b8b3564249eb185f0000000001b92c8a49ea5831fc1393afa650c9caa9020e0b8a8afedc842dfa258e7c01a02fe0e9d7bd4ed3c1228ccebd882de76c65d5cb43fd60b8789263e411991a156b2e2adc0fb648a66a932011b9801bea213c1c3e88ec9b741d7692da5f71cdddae132fdf03b20d92069ed446a0ca750bf8c94cbd6c337decbca28e25393eb0c9cf0a6b8dd8c32eb15b4becdaa44198bd871c503d84c16cf9a7c57e199e4bb92baa2cfaba7ea4772f98bcaf9d8d24e007cf552303f27c5c39ec34f0b732b23627b012acb4058260d92611730562ec2d8a6516a005ae90e6449405f3ec593b6d4bd8136abdcf0520f2ce0db0ad39fdc6db3f4cf3e89bc797c460ac6b9cdfe765bcd528fdc1e4f7d30a7dfdac79c5231c66e1b55aa14c6db55b75a408f91e3d3a985804fa182712571c15e5739df208420643492a356643c1bde2204deff918205c5a29094286532bdbac041ba6f05c8212ff98997fb8e33d4f42748383466246c2dc2d864f33221d46ab4bb5019de7afb06e72bf88a70036b1bc885ebdb6d48d03311819221c36576aefb088ef6d25536bc038947626656a8d381c096e67a2c8233c1383cbc38d74ff29678853f0e765b8eaa8617aee21731c1dc55310975182a250253ca15f604a70e5011fe87e5e280aa470942fe92e4f1f088e2d99473d5881a9273fb769d3ad71f495a098d4356118fafc4093ff206486a918b3e683149acaa62aff51394c628f4002505b55fd4dcfe8a6791c6623d72153b0f31f08370e41e610544b0d364ed203be3c14d93e0a7dd4332de0851a6401265da2e067b0676ab200000000000000000000000000000000000000000000000000000000000000ff00000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d000000000000000000000000000000000000000000000000000000006815a0cd000000000000000000000000000000000000000000000000000000006826f99700000000000000000000000000000000671b2c96b238c3a2f4b365f868d0609c000000000000000000000000000000007de40b3bbdc2443702000000000000000000000000000000000000000000000000000000000000000000000000001ee1",
	})
	if err != nil {
		panic(err)
	}
	wit, err := plonk.ValueOfWitness[sw_bn254.ScalarField](proof.Witness)
	if err != nil {
		panic(err)
	}
	//000000000c76d75a8819a02edb70c7257efa80143d5dfa2e1fe7e8f03c33b09f
	//000000005f18eb494256b3b8a8295fc0b94b3df9fcf267c2579fb09e55a3fe7f
	elems := wit.Public[levelcommon.OffsetOutHash : levelcommon.OffsetOutHash+levelcommon.CountHash]
	hash := getLinkedIdHash(elems)
	t.Logf("%x\n", hash)

}
