package circuits

import (
	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark/std/algebra/emulated/sw_bn254"
	"github.com/consensys/gnark/std/recursion/plonk"
	"github.com/consensys/gnark/test"
	ethcommon "github.com/ethereum/go-ethereum/common"
	"github.com/lightec-xyz/btc_provers/circuits/blockchain"
	"github.com/lightec-xyz/btc_provers/circuits/blockchain/levelcommon"
	"github.com/lightec-xyz/btc_provers/circuits/blockdepth"
	depthCommon "github.com/lightec-xyz/btc_provers/circuits/blockdepth/common"
	"github.com/lightec-xyz/btc_provers/circuits/blockdepth/recursivebulks"
	"github.com/lightec-xyz/btc_provers/circuits/blockdepth/timestamp"
	"github.com/lightec-xyz/btc_provers/circuits/txinchain"
	blockdepthUtil "github.com/lightec-xyz/btc_provers/utils/blockdepth"
	"github.com/lightec-xyz/btc_provers/utils/client"
	txinchainUtil "github.com/lightec-xyz/btc_provers/utils/txinchain"
	"github.com/lightec-xyz/daemon/common"
	"github.com/lightec-xyz/daemon/rpc"
	"github.com/ybbus/jsonrpc/v3"
	"net/http"
	"testing"
	"time"
)

var SetupDir = "/opt/lightec/opt2/circuitsetup/testnet"
var url = common.GetBtcUrl()
var User = common.GetBtcUser()
var Pass = common.GetBtcPwd()

func TestCircuit_BtcDepositProve(t *testing.T) {
	assert := test.NewAssert(t)
	testsig := ethcommon.FromHex("3f8e02c743e76a4bd655873a428db4fa2c46ac658854ba38f8be0fbbf9af9b2b6b377aaaaf231b6b890a5ee3c15a558f1ccc18dae0c844b6f06343b88a8d12e3")
	testaddr := ethcommon.FromHex("0x79e0F79F395CEcF90812ee7beFB883D7210e20E8")
	icpPublicKey := ethcommon.FromHex("02971351ad0a4e80b4d61003a152c746bde6d7ac5cba52466727c611fdc8c20f5b")

	blockDepthsCircuitFile, err := blockdepth.GetCircuitFiles(SetupDir)
	assert.NoError(err)

	timestampCircuitFile, err := timestamp.GetCircuitFile(SetupDir)
	assert.NoError(err)
	circuit, err := txinchain.NewDepositTxCircuit[sw_bn254.ScalarField, sw_bn254.G1Affine, sw_bn254.G2Affine, sw_bn254.GTEl](
		SetupDir, blockDepthsCircuitFile, timestampCircuitFile, [33]byte(icpPublicKey))
	assert.NoError(err)

	httpClient := &http.Client{Timeout: 3 * time.Minute}
	cl := client.NewJsonRpcClient(url, User, Pass, &jsonrpc.RPCClientOpts{HTTPClient: httpClient})

	genesisBlockHeight := uint32(80640)
	latestBlockHeight := uint32(87740)
	cpBlockHeight := uint32(85612)
	txid := "efdce9a68fa0d75a201203500529e5c010023a4414d9e5e483aa2b2a23aad5c0"
	txBlkHash := "000000000000000076aa54eac9e51777bef27a8d41f964449eb411ae68ebe9a6" //74755

	smooth, err := blockdepthUtil.GetSmoothedTimestampProofData(cl, latestBlockHeight)
	assert.NoError(err)
	smoothedTimestamp := smooth.Timestamp

	proofData, err := txinchainUtil.GetTxInChainProofData(cl, txid, txBlkHash, latestBlockHeight, cpBlockHeight, genesisBlockHeight)
	assert.NoError(err)

	blockChainProofFile, _ := HexToProof(rpc.Proof{
		"e2c0aecd74160e482f4fedc576184c2116556c9d939e558e62e8ca27b6c668bc9540141af5464db5959fa6de00015edb75f71ceb1a6efc779a7031b779749fd0e2530643e114566ea4cf2081cd516dd16b9b168de6739b9a991b353ccd6bfa48d294dd24f03fa8044dc55abec1db09f4bbb1d1a06603f9e894c4aa5bc165486a8e9199302e75cb77ba4011a47fd2c2b05f1df5f038be631768a6a4da613fc0edc43fff2de86fe7d31c207b519c45cc89279c328a582d81ee2e10c8a707aa75aa98b36824ef79795f03d3d0c6e10265f3331910ac0f9cb557376dd4dab20788f7933c2d773d2487386223a28d2dc6613f54eac912dc82d6aabb73b7b3cda7960c000000070c6426885094b4ce505f4ce6865c80c4fc11de360f5cc46e01be1b7d7ca52d982db4c7781fd3805e78d9f608c5fe6e2537f55090894b3639dd49934b0a4a3f55225b907776e1af9572ac838465b7f885d3ad7a3bfad129146b0c30379fe2b8b92109fd6a87ed25dd683d6f4397af10e2c79943c6e0586561c7728131684e3a3d1210b82ad2b5347411bef67eb3187057fdf952217208882e09b6c27fc524d32b021da9634b0a8ec36875bb48b9d8d8b504d69550d4b77e18fedc07111bf8a5a423272358d78add5e15658941e81619d2c775300438bda111ef27df3b5c4478bb85c6234089f7f253265969ee94ff372e05f26873e2d2c5aefc5a3919ad4374cf10a64449002c0bb8ef2f29851e8d2fa42d84edc99b79f1c7e04952140299df3500000001845c487ec8ae86db803760891b7dce5bb8d2423e8d3b97aa2c4afa22be0ccb6c",
		"0000001f000000000000001f00000000000000000000000000000000899f5ecb3f265b3a137443c45252215a00000000000000000000000000000000e938f6b579ddb5c04262596f0000000000000000000000000000000000000000cc01fa87749ac6b0957a0f1f12ce9fef000000000000000000000000000000009e3fbbfa5a408bd73dc906000000000001b92c8a49ea5831fc1393afa650c9caa9020e0b8a8afedc842dfa258e7c01a02fe0e9d7bd4ed3c1228ccebd882de76c65d5cb43fd60b8789263e411991a156b2e2adc0fb648a66a932011b9801bea213c1c3e88ec9b741d7692da5f71cdddae132fdf03b20d92069ed446a0ca750bf8c94cbd6c337decbca28e25393eb0c9cf0a6b8dd8c32eb15b4becdaa44198bd871c503d84c16cf9a7c57e199e4bb92baa2cfaba7ea4772f98bcaf9d8d24e007cf552303f27c5c39ec34f0b732b23627b012acb4058260d92611730562ec2d8a6516a005ae90e6449405f3ec593b6d4bd8136abdcf0520f2ce0db0ad39fdc6db3f4cf3e89bc797c460ac6b9cdfe765bcd528fdc1e4f7d30a7dfdac79c5231c66e1b55aa14c6db55b75a408f91e3d3a985804fa182712571c15e5739df208420643492a356643c1bde2204deff918205c5a29094286532bdbac041ba6f05c8212ff98997fb8e33d4f42748383466246c2dc2d864f33221d46ab4bb5019de7afb06e72bf88a70036b1bc885ebdb6d48d03311819221c36576aefb088ef6d25536bc038947626656a8d381c096e67a2c8233c1383cbc38d74ff29678853f0e765b8eaa8617aee21731c1dc55310975182a250253ca15f604a70e5011fe87e5e280aa470942fe92e4f1f088e2d99473d5881a9273fb769d3ad71f495a098d4356118fafc4093ff206486a918b3e683149acaa62aff51394c628f4002505b55fd4dcfe8a6791c6623d72153b0f31f08370e41e610544b0d364ed203be3c14d93e0a7dd4332de0851a6401265da2e067b0676ab200000000000000000000000000000000000000000000000000000000000000ff00000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d00000000000000000000000000000000000000000000000000000000685110c7000000000000000000000000000000000000000000000000000000006859802a000000000000000000000000000000007f8e14cd783f36405ac45b5ac82e1a310000000000000000000000000000000010ed2fba800700cb01000000000000000000000000000000000000000000000000000000000000000000000000001bbd",
	})
	blockChainVkey := blockchain.GetHybridVKey(SetupDir, 4)

	txProof, _ := HexToProof(rpc.Proof{
		"9f41da2882fa4cb303dbb6851c0901631ace9290a112f34afbf84f6e27392e07e4a5d240e09ba64de11f345cfc14e60bb2b5df394de26b10a26f0ce9ade616e2dbe15527a7f890166a957729dd7a6be985f5ddcb7569d8ffa5e3fcb265b016df87c659e20d1c1c60d3fd9b404ed51404e33a068129989941b93df5890297e914af55b84118d26e44d01671780c4cfbd42763a108016a91d35cc4f23237d03cf19804abafbc3636aa547a21730026d5c0dd8f9d1c4a2b20482125aeb167b331119b2f3f57a848594ff9451e7764744a3e84fd517af7872403b292d2165ca91808d2ba80f5c71b22451705cccc75a888512397f39bd2cd5e3122029fab0b4fd2a3000000071d62ce2cf06d3918f833c9187d84d0d630589fa4dd8995d8cbf40c52e9ed5d071cfd915152fc9abf4a866737b4f3b3819018f07e7fbcb03f3cbf561ece67c3fb229b093261a5fc3a927b9c222fd1b2db2c98b9c8468b97f25416989d7cb3da33276bcd0c637b04db10fc644bc5f3b002c5872bdbc15a450cfed1153b7cbb10d11bfc875f411adeaa2800c1be0a813cdbd2d87766a945829d8e091124e04bf8b30411501e502cbcb386d059294ff2dae8517b6f0a3a700f94e8c657377be9452f297e9768d562db09d0ed1b53d0f6d98722079005585ad1b8bcc2f350af19c62cd5ff7c51e6769d3520bc2f916df7f9455d0dec8fbc9294a073acaad36bd1cb4609478047757601d314c2705611c9f21fa43102ff615481c8116c29790fb544c1000000018d7b9c360dc9594b9b3c57240484b2be80a96c02ee9e0c29b939b19609036209",
		"00000011000000000000001100000000000000000000000000000000a6e9eb68ae11b49e4464f9418d7af2be000000000000000000000000000000007717e5c9ea54aa76000000000000000000000000000000000000000000000000cc01fa87749ac6b0957a0f1f12ce9fef000000000000000000000000000000009e3fbbfa5a408bd73dc90600000000001bdfca792dfb8555597ee314ab754fb6e762cbaa7b8b042821fb5f8fb69d3e0229ae1143a5f570681aeddc7294f8f99232e58cfc3d20219531a3097181fad05e2ae89c742705b0e4028319e81da84b23fd408ff0df57adf810c511eb68b22dc2033e7952456b7d4141bc1757d923fd9d61d42459f57cdf6262afad7a3e3d15581464d7d24e15c3b0d4602e6b87e6f4e5c49eec26556a422d907d8bea2d5ac3e21c3b1092b7861bea381e289e215f3b8a9f887a39590c6d3d146036f899b5d06a2762d92719d61db46a7b4f853e14c6e37c1de0dacb477ef96741f9478fb1b4141d051995a3aa01238e3eb7d7dca3cd2becc17765c6d75740b3ef3561f5e2997c06b862e4adcf1417aa3b5df0cd02aa91519c73cea042a08a818702425ee232a42fd2239171f2f166cad0a0b39468d8b8b272dec65759b254e582641498335f93053146e546fe5e0becc78d10e592c32e12b99ca8ecd0ba0f598e3692f40df4eb305d0c686af9712ef133bd9747af2584c760b048228d33727530b0a6aee0c048000000000000000000000000000000000000000000000000000000000000025a",
	})
	cpProof, _ := HexToProof(rpc.Proof{
		"87ac8257b328d73d19ea477671c37af50154ce088897e47cd79ac5d9b9872d9ed00cfacb3eb20f92f3d3323894d59561ae42ae57819ed9e07224732eebff0cdedebd7a4c54a0814dfdcfc49f72afa61dcc78cabb58c73bd0d4e6302065e3faccd08ce2ae5a71a9376e14c012b3a05b6bccc88940b1427907952f6259335407aea2e7ac14d3c0194070d36fdc5c323b7e4adbcd201377bee7be45165315185bf2e24985c77c0172a0bcc2028c639b0b18a271dae42a1337ad6257435f2e9f492ed9dd3e83cea659d507ec6b9ecd29b1249fda991c088b1512e3291960d7044d8f916cbbb7a9c0df16d3c0441968ff382411409018cec233b7d6bb1a6576abe867000000072ad87d911efcb57734eb6628ad29b5ade6025f9f2e674d580bc7c20fec360e081bcbaaa68c7d5a10de252b255df9b7d61156c0cbbc30df01d81d3e5cc21aa65401ede860a8509aef5c45f583fc220e41a33c15a971ddcfc6992c401f32af720a2cd5896bdcb2473275b880b7c6b91fc918c0cff415a182a63a7087843ac8b46c232ae5400e989f516ffffb50e6a5aee5a621bbd02e9e4d8c1e8e9ca96435fc61048f7ec2fd1150aa6c9b4175473855144f9f2467093238ce607c4d679a16e668042535ae62818ae3646a1e3a480285ffabcc69bd59eea44a5052aa1f7e2cfc2099fa92cd2f9793fc35354d9fba27b27ba4ea6172a8bf59894c1b1019b12cc2c62f7a28c16a5d823d47d469d701b069baa92ee5bc909e7395cf60a5a4f0692f1e00000001a173301e0112e0383ef47a10082c7ea1d2a7eba259d8f82b05e6d7ba3706e6ba",
		"0000001100000000000000110000000000000000000000000000000089cc4d1064ddd2f4a4f140172498377700000000000000000000000000000000ee744c35a07b9b6af72e8f980000000000000000000000000000000000000000cc01fa87749ac6b0957a0f1f12ce9fef000000000000000000000000000000009e3fbbfa5a408bd73dc90600000000001bdfca792dfb8555597ee314ab754fb6e762cbaa7b8b042821fb5f8fb69d3e0229ae1143a5f570681aeddc7294f8f99232e58cfc3d20219531a3097181fad05e2ae89c742705b0e4028319e81da84b23fd408ff0df57adf810c511eb68b22dc2033e7952456b7d4141bc1757d923fd9d61d42459f57cdf6262afad7a3e3d15581464d7d24e15c3b0d4602e6b87e6f4e5c49eec26556a422d907d8bea2d5ac3e21c3b1092b7861bea381e289e215f3b8a9f887a39590c6d3d146036f899b5d06a2762d92719d61db46a7b4f853e14c6e37c1de0dacb477ef96741f9478fb1b4141d051995a3aa01238e3eb7d7dca3cd2becc17765c6d75740b3ef3561f5e2997c06b862e4adcf1417aa3b5df0cd02aa91519c73cea042a08a818702425ee232a42fd2239171f2f166cad0a0b39468d8b8b272dec65759b254e582641498335f93053146e546fe5e0becc78d10e592c32e12b99ca8ecd0ba0f598e3692f40df4eb305d0c686af9712ef133bd9747af2584c760b048228d33727530b0a6aee0c0480000000000000000000000000000000000000000000000000000000000000850",
	})
	txDepthProof := depthCommon.DepthProof{
		Proof:             txProof,
		IsRecursive:       true,
		LastAbsorbedDepth: 9,
	}
	cpDepthProof := depthCommon.DepthProof{
		Proof:             cpProof,
		IsRecursive:       true,
		LastAbsorbedDepth: 5,
	}

	txDepthVkey, _ := recursivebulks.GetDepthVey(SetupDir, txDepthProof.IsRecursive, txDepthProof.LastAbsorbedDepth)
	cpDepthVkey, _ := recursivebulks.GetDepthVey(SetupDir, cpDepthProof.IsRecursive, cpDepthProof.LastAbsorbedDepth)

	latestBlkHash, err := cl.GetBlockHash(int64(latestBlockHeight))
	assert.NoError(err)
	sigverifProofData, err := blockdepthUtil.GetSigVerifProofData(latestBlkHash[:], testsig, icpPublicKey)
	assert.NoError(err)

	timestampVkey, err := timestamp.GetVKey(SetupDir)
	assert.NoError(err)

	timestampProof, _ := HexToProof(rpc.Proof{
		"dc7816d60c293a946d25cbe188556ae56ba359a31a498f74de7fcc61d773ae3ae0ff037d4844fe76cf8c20e34ea2823c5609afe6aa6141d5f1f74c7ad9545cd2c3b38a266f4749542b820e8ced57d2e7b035c86ea53b324353b04805a798e7f8b02fc5fdd2fe45efba14c0597a31945c2cf8d0b4c10d1358d8aa687dd99a89c1af907bf824f45c9180fcca0d6810418825f056d66b0b0a8c6374d159c349316893f5ec88a155aa6ac74c1499699ae464a7671ce1f69ecf85152ebaad43310431c3e9fa7149100489c1a53c85060dfd595455b183f9ca4c2b04673483a60d2968ec04fbf2bf6fc0d2e3a679a86b6c0cc0b7f377847d7dbb110be3caa6df229f75000000070855d5fce44a6cec649c5b28a2c257d9c0fd8c03009c0095cb32bfd32028de2d11083535d409ca040faa43109e1ef9b22ebc5179a5c2ad22648da8de91d906e90f2dc4aa81c907063bf7f9e1d838ead7e0b8beb46c7c15917414a94c39407213190519662c889513531e9e8ebdc14e621dd62a02e7a65e565b2ac147e3712ee62d5d29924d0a75d65bdfe8352747273995c95104c92f68c69b8e33cf3ff9c36f2cc45234df24a0d6582ea3732d22c785fd28b0713c9ba05dafd66f61e484cd090801cc2b020eaa490107258b1e4ee9da6fc3396fba189857a7689ee6ac7ee62ae432180f8fecf17c3acd7b5b1ae9f7ddc962eb23db37ef6058011daefb599d3c2b47251202764cfcb6865085e5f48bfe93c680ddeed44d74b273a34a254dd56b000000018feaadf70e3027175c27e4712deafe3a27d929bacea64cc6287d7d85a386488b",
		"000000070000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a6e9eb68ae11b49e4464f9418d7af2be000000000000000000000000000000007717e5c9ea54aa760000000000000000000000000000000000000000000000000000000000000000000000006854aae600000000000000000000000000000000cc01fa87749ac6b0957a0f1f12ce9fef000000000000000000000000000000009e3fbbfa5a408bd73dc906000000000000000000000000000000000000000000000000000000000000000000685947dc",
	})

	assignment, err := txinchain.NewDepositTxAssignment[sw_bn254.ScalarField, sw_bn254.G1Affine, sw_bn254.G2Affine, sw_bn254.GTEl](
		blockChainVkey, txDepthVkey, cpDepthVkey, timestampVkey,
		blockChainProofFile, txDepthProof.Proof, cpDepthProof.Proof, timestampProof,
		*sigverifProofData,
		proofData,
		testaddr,
		smoothedTimestamp,
		0,
	)
	assert.NoError(err)

	err = test.IsSolved(circuit, assignment, ecc.BN254.ScalarField())
	assert.NoError(err)
}

func TestCircuit_BtcTimestamp(t *testing.T) {
	//btctimestamp_82536_82572
	assert := test.NewAssert(t)
	circuit := timestamp.NewTimestampCircuit()
	cl := client.NewJsonRpcClient(url, User, Pass)
	cptimeProofData, err := blockdepthUtil.GetCpTimestampProofData(cl, 86985)
	assert.NoError(err)
	smoothedTimestampProofData, err := blockdepthUtil.GetSmoothedTimestampProofData(cl, 87009)
	assert.NoError(err)
	assignment, err := timestamp.NewTimestampAssignment(cptimeProofData, smoothedTimestampProofData)
	assert.NoError(err)
	err = test.IsSolved(circuit, assignment, ecc.BN254.ScalarField())
	assert.NoError(err)
}

func TestCircuit(t *testing.T) {
	witness, err := HexToWitness("0000000c000000000000000c00000000000000000000000000000000d08db4027b8f424d01cbe680e8ed3b8b0000000000000000000000000000000002063b2fed2a00c201000000000000000000000000000000000000000000000035325811e9c78be9cfb2db80e52fc0640000000000000000000000000000000015e38ed0165aa493850026b900000000000000000000000000000000000000000000000000000000000000000000010b00000000000000000000000000000000fc4e5b5c36c904c00ac73988ef7e6ead0000000000000000000000000000000034d788fac6fc29a967306d277b1526910000000000000000000000000000000047258a14bea341b27be1e305813ffade00000000000000000000000000000000fa4735eb61ea275603000000000000000000000000000000000000000000000000000000000000000000000067f4a34a000000000000000000000000000000000000000000000000000000000000001500000000000000000000000079e0f79f395cecf90812ee7befb883d7210e20e8")
	if err != nil {
		t.Fatal(err)
	}
	vector := witness.Vector()
	t.Log(vector)
	bigInts, err := HexWitnessToBigInts("0000000c000000000000000c00000000000000000000000000000000d08db4027b8f424d01cbe680e8ed3b8b0000000000000000000000000000000002063b2fed2a00c201000000000000000000000000000000000000000000000035325811e9c78be9cfb2db80e52fc0640000000000000000000000000000000015e38ed0165aa493850026b900000000000000000000000000000000000000000000000000000000000000000000010b00000000000000000000000000000000fc4e5b5c36c904c00ac73988ef7e6ead0000000000000000000000000000000034d788fac6fc29a967306d277b1526910000000000000000000000000000000047258a14bea341b27be1e305813ffade00000000000000000000000000000000fa4735eb61ea275603000000000000000000000000000000000000000000000000000000000000000000000067f4a34a000000000000000000000000000000000000000000000000000000000000001500000000000000000000000079e0f79f395cecf90812ee7befb883d7210e20e8")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(bigInts)
}

func TestHexToPlonkProof(t *testing.T) {
	proof, err := HexToProof(rpc.Proof{
		Proof:   "ea7658d0475d15da6c23b65d8d2a92d439caf64a43fd2e7d0185b8e3d4128d659ae0f0a9b7b22f8f68ab12ea162e1c0bc08727019898edfaf640c4c44226fb9da1040f078179ededa821c3d5f9faa539fc7ff4b15efc3eb25ae964c4eb85731ca26c260e1dd8f14cf22c0ad7fe9bd3a5d6722f5c4d21938ffd13dc421d65e68caac182d1e91ee61f678858b91a3b8d65cbc4f28b4700577097a46dc0cb2a49c2912fedca7fb3851189cb6943ea5267ad45f35ecabf012bff8dd123fc112624e6a639a64b191e6ab11fdf962b7a7509614200bd39931183ba6a30c603efe94d2b96472b5dc89160625fa9e89ca6d5b389d912c6485f5dbe62aa7e5ad01e7e9681000000071fb37a91464a0b27520dac53e428d7c3f7808d584804050fca1888a5058e766c02ce3d67669f758f92342d5696cbb869f725014554984e2fd701eb7e848a05e12c726bfd2b68c28b3abf7015990a5af97296eb5eda1455eb0ae8f5126917d6822c15b819b74a43d476e50076e050852fa807542137883e2abaf8bbd1058124de28d77bb0541018cd1dc0595d76f9bfeebd7c672d4fae266af80975496702c5772a3d57adb22ed4cc6ade861fb3b3803d42b36e6d36e3e3fc42dd63432febf5f60d9c4cc44afc6d341acc605954da95cebb124c8a7fe6942ff90e19aea9556b56ea00e3bcfbc62a2046b498394d93c1091bba675a1028aea8006ef9c83ada934807a7b1e3f4aa9afe30c4262911890a9e6a4489dc7dcf2235bcd856d885be0af800000001818c621931b915d0e929c6f22fb9a85193f47697ef9b9384507e1b773553ef07",
		Witness: "00000007000000000000000700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000046b6b4c40486ecf56ae7298a2942fee800000000000000000000000000000000ad7269540cd8d949030000000000000000000000000000000000000000000000000000000000000000000000684117960000000000000000000000000000000008fa9e487c4e0f09c387e6f0988f3c68000000000000000000000000000000001cc46b54424ee1c1c1945da000000000000000000000000000000000000000000000000000000000000000006842b811",
	})
	if err != nil {
		t.Fatal(err)
	}
	t.Log(proof)
	wit, err := plonk.ValueOfWitness[sw_bn254.ScalarField](proof.Witness)
	if err != nil {
		t.Fatal(err)
	}
	//00000000a05d94c1c1e14e42546bc41c683c8f98f0e687c3090f4e7c489efa08
	elems := wit.Public[timestamp.OffsetOutgoingHash : timestamp.OffsetOutgoingHash+timestamp.CountOutgoingHash]
	hash := getLinkedIdHash(elems)
	t.Logf("%x\n", hash)

}

func TestTxWitness(t *testing.T) {
	proof, err := HexToProof(rpc.Proof{
		Proof:   "aface4fc1543f6ec48e1505265a9bedbdaaccd2b3d7204fcbc0e387181e6367fcf95a4be8bf5dd695da2064dab5f1db1e006c305730d04724f85510743b8819be1c4a33ef073a11cf8c002c2e50d58652d1c6b0e7162b0b8b259370857bdee3c93fc306b7ef5a343da1cefae16959f077843df965e1039106ed4a20c5d61dcb8d8ec5ae4ba33d5e4fafaaa348e12a3de3364a94b0d250f1cf31db93f33e108328673b7b9b4fd0a86dfada24a6181d846bba0f5e8360b9a597ee6edcdc27d2c01895eb0e405192a9aac3ddab5b0cde8eb28f8688d187160cd751ffd1abf1bc2c59958ac282a7abb9754427e12ca36ab551c22b4bdc04255bfd91c153a110cce9f000000072bf771730d2f2c2d857c174dd4d5e47a6c77bdbb9f4c9df902468ca0cb39fcfe21ce1ed14dcf9bb8c37c3c486d84e7818eba75cd1da2d0f2efd82435892e381403c1efb25170918d7881c131b642db0f4c7c2c17f06b366e40ae84a74c4fbe170e5a88ebedba21fce88ffb9d33ba7087a64ec1c79433134f0b9fc892c736eaab0474d08368739f79d5a03e92ab3220829728af22807c748b88d102d44ece69cb257c9cc14efa2679bcce74548030deb0703fc17570e4ef6158309b5c2bbb23190a5bd6de699a35c50c1344ec31e588a2a24f415ca67e9ee645197ec8416d06fda3f3ee1d0b986ab128d44117b942824db36f097c45d8808d68478f42acb4e5d30fe118bf04536adfb072aa765ef280d8c3ceadf33619dbc05d29c5c2a68e27dd00000001a8076a2d73d42edf7fca0a23533a8c325ef2e11fc909c0a5a12eba153d7fb977",
		Witness: "0000001f000000000000001f000000000000000000000000000000001d295d252016197ca6ce9bba7116b59f00000000000000000000000000000000c626e198fe3b0452af4f6db500000000000000000000000000000000000000007ffea3559eb09f57c267f2fcf93d4bb900000000000000000000000000000000c05f29a8b8b3564249eb185f0000000001b92c8a49ea5831fc1393afa650c9caa9020e0b8a8afedc842dfa258e7c01a02fe0e9d7bd4ed3c1228ccebd882de76c65d5cb43fd60b8789263e411991a156b2e2adc0fb648a66a932011b9801bea213c1c3e88ec9b741d7692da5f71cdddae132fdf03b20d92069ed446a0ca750bf8c94cbd6c337decbca28e25393eb0c9cf0a6b8dd8c32eb15b4becdaa44198bd871c503d84c16cf9a7c57e199e4bb92baa2cfaba7ea4772f98bcaf9d8d24e007cf552303f27c5c39ec34f0b732b23627b012acb4058260d92611730562ec2d8a6516a005ae90e6449405f3ec593b6d4bd8136abdcf0520f2ce0db0ad39fdc6db3f4cf3e89bc797c460ac6b9cdfe765bcd528fdc1e4f7d30a7dfdac79c5231c66e1b55aa14c6db55b75a408f91e3d3a985804fa182712571c15e5739df208420643492a356643c1bde2204deff918205c5a29094286532bdbac041ba6f05c8212ff98997fb8e33d4f42748383466246c2dc2d864f33221d46ab4bb5019de7afb06e72bf88a70036b1bc885ebdb6d48d03311819221c36576aefb088ef6d25536bc038947626656a8d381c096e67a2c8233c1383cbc38d74ff29678853f0e765b8eaa8617aee21731c1dc55310975182a250253ca15f604a70e5011fe87e5e280aa470942fe92e4f1f088e2d99473d5881a9273fb769d3ad71f495a098d4356118fafc4093ff206486a918b3e683149acaa62aff51394c628f4002505b55fd4dcfe8a6791c6623d72153b0f31f08370e41e610544b0d364ed203be3c14d93e0a7dd4332de0851a6401265da2e067b0676ab200000000000000000000000000000000000000000000000000000000000000ff00000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d000000000000000000000000000000000000000000000000000000006815a0cd000000000000000000000000000000000000000000000000000000006826f99700000000000000000000000000000000671b2c96b238c3a2f4b365f868d0609c000000000000000000000000000000007de40b3bbdc2443702000000000000000000000000000000000000000000000000000000000000000000000000001ee1",
	})
	if err != nil {
		panic(err)
	}
	wit, err := plonk.ValueOfWitness[sw_bn254.ScalarField](proof.Witness)
	if err != nil {
		panic(err)
	}
	//000000000c76d75a8819a02edb70c7257efa80143d5dfa2e1fe7e8f03c33b09f
	//000000005f18eb494256b3b8a8295fc0b94b3df9fcf267c2579fb09e55a3fe7f
	elems := wit.Public[levelcommon.OffsetOutHash : levelcommon.OffsetOutHash+levelcommon.CountHash]
	hash := getLinkedIdHash(elems)
	t.Logf("%x\n", hash)

}
