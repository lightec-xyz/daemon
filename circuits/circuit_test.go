package circuits

import (
	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark/std/algebra/emulated/sw_bn254"
	"github.com/consensys/gnark/std/recursion/plonk"
	"github.com/consensys/gnark/test"
	ethcommon "github.com/ethereum/go-ethereum/common"
	"github.com/lightec-xyz/btc_provers/circuits/blockchain"
	"github.com/lightec-xyz/btc_provers/circuits/blockchain/levelcommon"
	"github.com/lightec-xyz/btc_provers/circuits/blockdepth"
	depthCommon "github.com/lightec-xyz/btc_provers/circuits/blockdepth/common"
	"github.com/lightec-xyz/btc_provers/circuits/blockdepth/recursivebulks"
	"github.com/lightec-xyz/btc_provers/circuits/blockdepth/timestamp"
	"github.com/lightec-xyz/btc_provers/circuits/txinchain"
	blockdepthUtil "github.com/lightec-xyz/btc_provers/utils/blockdepth"
	"github.com/lightec-xyz/btc_provers/utils/client"
	txinchainUtil "github.com/lightec-xyz/btc_provers/utils/txinchain"
	"github.com/lightec-xyz/daemon/rpc"
	"github.com/ybbus/jsonrpc/v3"
	"net/http"
	"testing"
	"time"
)

var SetupDir = "/opt/lightec/opt2/circuitsetup/devnet02"
var url = ""
var User = ""
var Pass = ""

func TestCircuit_BtcDepositProve(t *testing.T) {
	assert := test.NewAssert(t)
	testsig := ethcommon.FromHex("3f8e02c743e76a4bd655873a428db4fa2c46ac658854ba38f8be0fbbf9af9b2b6b377aaaaf231b6b890a5ee3c15a558f1ccc18dae0c844b6f06343b88a8d12e3")
	testaddr := ethcommon.FromHex("0x79e0F79F395CEcF90812ee7beFB883D7210e20E8")
	icpPublicKey := ethcommon.FromHex("02971351ad0a4e80b4d61003a152c746bde6d7ac5cba52466727c611fdc8c20f5b")

	blockDepthsCircuitFile, err := blockdepth.GetCircuitFiles(SetupDir)
	assert.NoError(err)

	timestampCircuitFile, err := timestamp.GetCircuitFile(SetupDir)
	assert.NoError(err)
	circuit, err := txinchain.NewDepositTxCircuit[sw_bn254.ScalarField, sw_bn254.G1Affine, sw_bn254.G2Affine, sw_bn254.GTEl](
		SetupDir, blockDepthsCircuitFile, timestampCircuitFile, [33]byte(icpPublicKey))
	assert.NoError(err)

	httpClient := &http.Client{Timeout: 3 * time.Minute}
	cl := client.NewJsonRpcClient(url, User, Pass, &jsonrpc.RPCClientOpts{HTTPClient: httpClient})

	genesisBlockHeight := uint32(74592)
	latestBlockHeight := uint32(82823)
	cpBlockHeight := uint32(80473)
	txid := "56cfb4ca94f737c19f47c1ee351c5f01f80f796fabc09cfe195886f1809f50d9"
	txBlkHash := "000000005784d3c601c710d9e74aa97b7331b35837d9a186ac1fe3f1da1d75b1" //74755

	smooth, err := blockdepthUtil.GetSmoothedTimestampProofData(cl, latestBlockHeight)
	assert.NoError(err)
	smoothedTimestamp := smooth.Timestamp

	proofData, err := txinchainUtil.GetTxInChainProofData(cl, txid, txBlkHash, latestBlockHeight, cpBlockHeight, genesisBlockHeight)
	assert.NoError(err)

	blockChainProofFile, _ := HexToProof(rpc.Proof{
		"8462f84d2f1ad0d7fbf8a5a3c4f85eba921c255eed560aecfcd8379dfd7666f0955fb4ed7f76bfbc8fd3601be2dfa9b965d3393212b615dea37907a28f9afcc1ceba2166f490977badeed5e5cfd74a50bbe001b39f766b34057fcc89cb49b1d99e27ca2851052ebddc55418889522c1e32551b082f047a71043f8481d0fea941c5700dfb53cf19e032c3e581596996c8d2219452fd3c6320797281ca28940a5fce565a01b056580bcd9dc1f2f4cbb09123a01aad706c0f013d4fdfdbcb316a70d2d6008c06853e4633fed8e868c5b6d201f95e244ed14a6b260fa24a986db689cfa39bac3d67a03055725e257f2a4f01b74a997583c6c86c84ccb81f3cb3ae09000000072485ada7548f1711e04595bf953cf17052c1fa442578d7fa0c3b629e847210a81b1988cd2f6b53c0dfafa4bed6f6e771623842471b94b1d2ee8c7ec516c09c7e287bffcbc1b903fd6414951030371d7efef6914f2518c4827327bfca21faceed1617174e25575064652ff7f97ebc9bccff03fa850d36022949aca8b9e8a7c31418d4097a01244d12fd1e4d99756c2e3783dcbd07085ca560a7f50fa35e752c5b1d3a15e29efd68d2fb4c7d18ae8a1812107750e3d23c15375448efa382b60a3228a2e8cf558d438c6583609c1ea38d5fb1392981679faf03c4b29b44d70c2947d12e1be0228a5c8a4da5d46c628a9d67a98c7922dbc09bac7f3158ef032ff9220ce0c86c75b5c0f5f50acb8c89ffab343996eb6e3c54bd3481f01fa22aa5c55a000000019ab180e5c3656cf26961fbbc55de1391983cc190ff5a961c5cfc82084c2f6b6a",
		"0000001f000000000000001f000000000000000000000000000000001d295d252016197ca6ce9bba7116b59f00000000000000000000000000000000c626e198fe3b0452af4f6db500000000000000000000000000000000000000009f9f77ad324c63771e79e24db0acaf2e000000000000000000000000000000006fdb34250e3221f726b840000000000001b92c8a49ea5831fc1393afa650c9caa9020e0b8a8afedc842dfa258e7c01a02fe0e9d7bd4ed3c1228ccebd882de76c65d5cb43fd60b8789263e411991a156b2e2adc0fb648a66a932011b9801bea213c1c3e88ec9b741d7692da5f71cdddae132fdf03b20d92069ed446a0ca750bf8c94cbd6c337decbca28e25393eb0c9cf0a6b8dd8c32eb15b4becdaa44198bd871c503d84c16cf9a7c57e199e4bb92baa2cfaba7ea4772f98bcaf9d8d24e007cf552303f27c5c39ec34f0b732b23627b012acb4058260d92611730562ec2d8a6516a005ae90e6449405f3ec593b6d4bd8136abdcf0520f2ce0db0ad39fdc6db3f4cf3e89bc797c460ac6b9cdfe765bcd528fdc1e4f7d30a7dfdac79c5231c66e1b55aa14c6db55b75a408f91e3d3a985804fa182712571c15e5739df208420643492a356643c1bde2204deff918205c5a29094286532bdbac041ba6f05c8212ff98997fb8e33d4f42748383466246c2dc2d864f33221d46ab4bb5019de7afb06e72bf88a70036b1bc885ebdb6d48d03311819221c36576aefb088ef6d25536bc038947626656a8d381c096e67a2c8233c1383cbc38d74ff29678853f0e765b8eaa8617aee21731c1dc55310975182a250253ca15f604a70e5011fe87e5e280aa470942fe92e4f1f088e2d99473d5881a9273fb769d3ad71f495a098d4356118fafc4093ff206486a918b3e683149acaa62aff51394c628f4002505b55fd4dcfe8a6791c6623d72153b0f31f08370e41e610544b0d364ed203be3c14d93e0a7dd4332de0851a6401265da2e067b0676ab200000000000000000000000000000000000000000000000000000000000000bf000000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000006828c41000000000000000000000000000000000000000000000000000000000682a626a00000000000000000000000000000000671b2c96b238c3a2f4b365f868d0609c000000000000000000000000000000007de40b3bbdc244370200000000000000000000000000000000000000000000000000000000000000000000000000202c",
	})
	blockChainVkey := blockchain.GetHybridVKey(SetupDir, 14)

	txProof, _ := HexToProof(rpc.Proof{
		"d95f3f981bc044d84b903b8b8236cae3eefef9a994cfcda5e1a15ca2ecc79baf8edf0612c972932882fdc0065305ef4fd4b9726fc392db8f556b1cc0b85098b0ce466efc3d9437b86abe9b40afa50bb45a3a955c8595525c39373cbd7a1b9cf7cad3301dfbbeb36243b6b137233d7fb4438f72cce78377f35d8fd2506576d3b7d114f7642b8bbacedde761d25ed3d2a4e853552abf92d50d92ea5bbc3991da05c6b09e92870b58059e235a3636b8967bad95532a31e567d9d99c55d092110e83a933b59a829ea72aabc64b77465a7c793acaea33cf6cfb4255374826ad401c49c34ca4136b3b119fdf950b9ecc4c48216ec7cd5b94da9ad8f4aa975ffda4b3e300000007179d9daf20e82069918d3153c8a0e7d83367eb70711e49c162bc48577e16040702ba6d00e0ee07fe2da0aebbb3258059a461289f10d099b2c8a8561d10f531c60fde96c23f73cf5d636ce577512dbedda10c7d47e075ebad3226653fac52b2e40269271cca5bd95ceb2b614a613915160f4d04148c4454395a18da040f1746fb2931a04b09a1fc5cd7abdb3310419f58829420fac69d528ba6c8acf0e99cb62c07796f005441e5964d99510d82d02b3249aef14a27a0fad145798c3d7c2f79eb010d02080885eac70aa0e5e72315b8ec7e3d8bd782bb840632b1e8c48613982ec7ab36635f06b52ddc5271282d7144dc2cb7131fe285d04178cb6b24608ed73629cc7e758e7fb30fbb9b8873e0b09e6ebaad86df55edfd7cc5df6ded374e9b0f0000000191d4d1982cc333ae385323e6918e7cf9a545963717a565ad5f64d2875dd4d055",
		"00000011000000000000001100000000000000000000000000000000b1751ddaf1e31fac86a1d93758b33173000000000000000000000000000000007ba94ae7d910c701c6d38457000000000000000000000000000000000000000024384f22279f23e00539bb0c35ccf35f00000000000000000000000000000000be8469af1d95581ee7480d94000000001bdfca792dfb8555597ee314ab754fb6e762cbaa7b8b042821fb5f8fb69d3e0229ae1143a5f570681aeddc7294f8f99232e58cfc3d20219531a3097181fad05e2ae89c742705b0e4028319e81da84b23fd408ff0df57adf810c511eb68b22dc2033e7952456b7d4141bc1757d923fd9d61d42459f57cdf6262afad7a3e3d15581464d7d24e15c3b0d4602e6b87e6f4e5c49eec26556a422d907d8bea2d5ac3e21c3b1092b7861bea381e289e215f3b8a9f887a39590c6d3d146036f899b5d06a2762d92719d61db46a7b4f853e14c6e37c1de0dacb477ef96741f9478fb1b4141d051995a3aa01238e3eb7d7dca3cd2becc17765c6d75740b3ef3561f5e2997c06b862e4adcf1417aa3b5df0cd02aa91519c73cea042a08a818702425ee232a42fd2239171f2f166cad0a0b39468d8b8b272dec65759b254e582641498335f93053146e546fe5e0becc78d10e592c32e12b99ca8ecd0ba0f598e3692f40df4eb305d0c686af9712ef133bd9747af2584c760b048228d33727530b0a6aee0c04800000000000000000000000000000000000000000000000000000000000000f6",
	})
	cpProof, _ := HexToProof(rpc.Proof{
		"950c1a6672616699436788816b9547b61829af4133344a5a8e972fd23acf8309d7e5eaffda593fab5cb64f9c58cab2cc885fa36070bf9ff9c38378aa5852bc9896ed4bf8e346f40c660a5b621e128895ee5035d438fa1b17d78ae755a281c7a792f7386a94bf0c931b41194564bde4b21aa0dfc8930aca7de522fd7b0e88e6abe286694a5a0c2acb3f9645d4193a12d01f997a9b9b702c8287f81a681acd882dc504d050d2e30cb5fca16d701022b986be3296853e4a2466c7b4a5daa77ce233866c261a7fba388a62bbf4899fd084d1832b2e115ab03eaa396093950f9e0895d9ec76081f8a3ea2c92ce1d01e497d25cfc13535ca0c51d7d24a77a461c30cd500000007225ff4686af3f8a0eebaf6a20e843e8e9513e943728124bc046c4bb4cc50c3cf1303196f6ab5e67e404c2bd209cd15f98ea4c689dc0745ad1f938e28669356870d0650ed4be7bbe7cdefabffebac49e6d0021d06de7c309f3353849112901bbd0f4bd5f99a126724153c7ad98c9782421a1bc3e3bbe28271f62e389b72db8ff019f23f809ad1f0a19b173a80dc3c61526301cdfa8f045c032bed040ea377e1fa1660b122422c35d60dce6d71eda2243364f3ea370ff8510e6b6754b77136fdc4091d381ef52b45ae7904445f02f32e6d1bf4c41108e6302da026fa6db24acbb0948e695f6860006599d1056921f68a81763ed80ab6444bbe89f536d5de5f08cf15f3dbabe7e82a2b419391453a96bd293f7edf87fe96bf9852793d992675680f00000001ccab2a89b5a4b954d52644d483816b128525ab7e5fd6f88fdc301629742c7f1b",
		"0000001100000000000000110000000000000000000000000000000066019e5abaf1d50b839d9e6fb37adf9e0000000000000000000000000000000002eafe09670c4ec8fbbbbc18000000000000000000000000000000000000000024384f22279f23e00539bb0c35ccf35f00000000000000000000000000000000be8469af1d95581ee7480d94000000001bdfca792dfb8555597ee314ab754fb6e762cbaa7b8b042821fb5f8fb69d3e0229ae1143a5f570681aeddc7294f8f99232e58cfc3d20219531a3097181fad05e2ae89c742705b0e4028319e81da84b23fd408ff0df57adf810c511eb68b22dc2033e7952456b7d4141bc1757d923fd9d61d42459f57cdf6262afad7a3e3d15581464d7d24e15c3b0d4602e6b87e6f4e5c49eec26556a422d907d8bea2d5ac3e21c3b1092b7861bea381e289e215f3b8a9f887a39590c6d3d146036f899b5d06a2762d92719d61db46a7b4f853e14c6e37c1de0dacb477ef96741f9478fb1b4141d051995a3aa01238e3eb7d7dca3cd2becc17765c6d75740b3ef3561f5e2997c06b862e4adcf1417aa3b5df0cd02aa91519c73cea042a08a818702425ee232a42fd2239171f2f166cad0a0b39468d8b8b272dec65759b254e582641498335f93053146e546fe5e0becc78d10e592c32e12b99ca8ecd0ba0f598e3692f40df4eb305d0c686af9712ef133bd9747af2584c760b048228d33727530b0a6aee0c048000000000000000000000000000000000000000000000000000000000000092e",
	})
	txDepthProof := depthCommon.DepthProof{
		Proof:             txProof,
		IsRecursive:       true,
		LastAbsorbedDepth: 5,
	}
	cpDepthProof := depthCommon.DepthProof{
		Proof:             cpProof,
		IsRecursive:       true,
		LastAbsorbedDepth: 10,
	}

	txDepthVkey, _ := recursivebulks.GetDepthVey(SetupDir, txDepthProof.IsRecursive, txDepthProof.LastAbsorbedDepth)
	cpDepthVkey, _ := recursivebulks.GetDepthVey(SetupDir, cpDepthProof.IsRecursive, cpDepthProof.LastAbsorbedDepth)

	latestBlkHash, err := cl.GetBlockHash(int64(latestBlockHeight))
	assert.NoError(err)
	sigverifProofData, err := blockdepthUtil.GetSigVerifProofData(latestBlkHash[:], testsig, icpPublicKey)
	assert.NoError(err)

	timestampVkey, err := timestamp.GetVKey(SetupDir)
	assert.NoError(err)

	timestampProof, _ := HexToProof(rpc.Proof{
		"cae38bed8c193c5c74802ae3e0a0134c93bc4917966544148a2044311db886e994a11f8c7378c287850dda94e9478626d36fc579207863599eb0f2315fe9a879d6043638098ca16a93eea500e296494609eaaef73d873bcaeba6f9428708aaa6e51645ae5739eb35fbbd930736e28f7fb57cadd3400eb9586efe21f971806f15ca11ef47b5700c0c127b37564c721978f3266c9e91d2300835d29a1e2bc463bd8600cfa6e1685701cd5ea201698b149c0191f35ca41ad3cc3364c749313a0a459839b12a22b7e2a005b75cb35439a5d1fe733d52b6412faf7a60417a1ed78c0cd1124790c2a90f8667b29bee41b6e780c1126256a2fe75150c94e487825e44230000000714adb98ce28227be9acd8ec9f1e8fb45e46df255d8b8ebd115f83ccb10f1372d0654139fb5cace41380eb4d5595c10fd34e0f57782cc8f2b32c267ca4513bce227254709c187e3f1d70ad947fd06690c47451ff7c393ac26f7cfa3e9c80f27280ff3a5de47635001cc87dc577f260c7a59bf79b2472d503d3f199aa935fa1ff12956d45d40354d8300c57a7f9e7da781af9724f923af93c451f11fc807cdbbc52c75548b5f38676a9ec144e890618cda5578cc7945e83d4be5ee626498eea4c7027474088a8fbce097840646ef4783e4d4d61cee51590e87431f503ef3242bbd95b987606dce70577e4017cdd2b12d15c1927f5902851c9db0fe89081372dced2436272c1f14b3e4665e4158098c65b04d86c2a85e44d712a4b5ab129975be1000000001ea8b99dc1f677845c9f7fd2cb1dcdc2eef7e4aaf30546a8ac9ca010653e7ea4a",
		"000000070000000000000007000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000b1751ddaf1e31fac86a1d93758b33173000000000000000000000000000000007ba94ae7d910c701c6d3845700000000000000000000000000000000000000000000000000000000000000006827d16a0000000000000000000000000000000024384f22279f23e00539bb0c35ccf35f00000000000000000000000000000000be8469af1d95581ee7480d940000000000000000000000000000000000000000000000000000000000000000682a382e",
	})

	assignment, err := txinchain.NewDepositTxAssignment[sw_bn254.ScalarField, sw_bn254.G1Affine, sw_bn254.G2Affine, sw_bn254.GTEl](
		blockChainVkey, txDepthVkey, cpDepthVkey, timestampVkey,
		blockChainProofFile, txDepthProof.Proof, cpDepthProof.Proof, timestampProof,
		*sigverifProofData,
		proofData,
		testaddr,
		smoothedTimestamp,
		1,
	)
	assert.NoError(err)

	err = test.IsSolved(circuit, assignment, ecc.BN254.ScalarField())
	assert.NoError(err)
}

func TestCircuit_BtcTimestamp(t *testing.T) {
	//btctimestamp_82536_82572
	assert := test.NewAssert(t)
	circuit := timestamp.NewTimestampCircuit()
	cl := client.NewJsonRpcClient(url, User, Pass)
	cptimeProofData, err := blockdepthUtil.GetCpTimestampProofData(cl, 82536)
	assert.NoError(err)
	smoothedTimestampProofData, err := blockdepthUtil.GetSmoothedTimestampProofData(cl, 82838)
	assert.NoError(err)
	assignment, err := timestamp.NewTimestampAssignment(cptimeProofData, smoothedTimestampProofData)
	assert.NoError(err)
	err = test.IsSolved(circuit, assignment, ecc.BN254.ScalarField())
	assert.NoError(err)
}

func TestCircuit(t *testing.T) {
	witness, err := HexToWitness("0000000c000000000000000c00000000000000000000000000000000d08db4027b8f424d01cbe680e8ed3b8b0000000000000000000000000000000002063b2fed2a00c201000000000000000000000000000000000000000000000035325811e9c78be9cfb2db80e52fc0640000000000000000000000000000000015e38ed0165aa493850026b900000000000000000000000000000000000000000000000000000000000000000000010b00000000000000000000000000000000fc4e5b5c36c904c00ac73988ef7e6ead0000000000000000000000000000000034d788fac6fc29a967306d277b1526910000000000000000000000000000000047258a14bea341b27be1e305813ffade00000000000000000000000000000000fa4735eb61ea275603000000000000000000000000000000000000000000000000000000000000000000000067f4a34a000000000000000000000000000000000000000000000000000000000000001500000000000000000000000079e0f79f395cecf90812ee7befb883d7210e20e8")
	if err != nil {
		t.Fatal(err)
	}
	vector := witness.Vector()
	t.Log(vector)
	bigInts, err := HexWitnessToBigInts("0000000c000000000000000c00000000000000000000000000000000d08db4027b8f424d01cbe680e8ed3b8b0000000000000000000000000000000002063b2fed2a00c201000000000000000000000000000000000000000000000035325811e9c78be9cfb2db80e52fc0640000000000000000000000000000000015e38ed0165aa493850026b900000000000000000000000000000000000000000000000000000000000000000000010b00000000000000000000000000000000fc4e5b5c36c904c00ac73988ef7e6ead0000000000000000000000000000000034d788fac6fc29a967306d277b1526910000000000000000000000000000000047258a14bea341b27be1e305813ffade00000000000000000000000000000000fa4735eb61ea275603000000000000000000000000000000000000000000000000000000000000000000000067f4a34a000000000000000000000000000000000000000000000000000000000000001500000000000000000000000079e0f79f395cecf90812ee7befb883d7210e20e8")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(bigInts)
}

func TestHexToPlonkProof(t *testing.T) {
	proof, err := HexToProof(rpc.Proof{
		Proof:   "8462f84d2f1ad0d7fbf8a5a3c4f85eba921c255eed560aecfcd8379dfd7666f0955fb4ed7f76bfbc8fd3601be2dfa9b965d3393212b615dea37907a28f9afcc1ceba2166f490977badeed5e5cfd74a50bbe001b39f766b34057fcc89cb49b1d99e27ca2851052ebddc55418889522c1e32551b082f047a71043f8481d0fea941c5700dfb53cf19e032c3e581596996c8d2219452fd3c6320797281ca28940a5fce565a01b056580bcd9dc1f2f4cbb09123a01aad706c0f013d4fdfdbcb316a70d2d6008c06853e4633fed8e868c5b6d201f95e244ed14a6b260fa24a986db689cfa39bac3d67a03055725e257f2a4f01b74a997583c6c86c84ccb81f3cb3ae09000000072485ada7548f1711e04595bf953cf17052c1fa442578d7fa0c3b629e847210a81b1988cd2f6b53c0dfafa4bed6f6e771623842471b94b1d2ee8c7ec516c09c7e287bffcbc1b903fd6414951030371d7efef6914f2518c4827327bfca21faceed1617174e25575064652ff7f97ebc9bccff03fa850d36022949aca8b9e8a7c31418d4097a01244d12fd1e4d99756c2e3783dcbd07085ca560a7f50fa35e752c5b1d3a15e29efd68d2fb4c7d18ae8a1812107750e3d23c15375448efa382b60a3228a2e8cf558d438c6583609c1ea38d5fb1392981679faf03c4b29b44d70c2947d12e1be0228a5c8a4da5d46c628a9d67a98c7922dbc09bac7f3158ef032ff9220ce0c86c75b5c0f5f50acb8c89ffab343996eb6e3c54bd3481f01fa22aa5c55a000000019ab180e5c3656cf26961fbbc55de1391983cc190ff5a961c5cfc82084c2f6b6a",
		Witness: "0000001f000000000000001f000000000000000000000000000000001d295d252016197ca6ce9bba7116b59f00000000000000000000000000000000c626e198fe3b0452af4f6db500000000000000000000000000000000000000009f9f77ad324c63771e79e24db0acaf2e000000000000000000000000000000006fdb34250e3221f726b840000000000001b92c8a49ea5831fc1393afa650c9caa9020e0b8a8afedc842dfa258e7c01a02fe0e9d7bd4ed3c1228ccebd882de76c65d5cb43fd60b8789263e411991a156b2e2adc0fb648a66a932011b9801bea213c1c3e88ec9b741d7692da5f71cdddae132fdf03b20d92069ed446a0ca750bf8c94cbd6c337decbca28e25393eb0c9cf0a6b8dd8c32eb15b4becdaa44198bd871c503d84c16cf9a7c57e199e4bb92baa2cfaba7ea4772f98bcaf9d8d24e007cf552303f27c5c39ec34f0b732b23627b012acb4058260d92611730562ec2d8a6516a005ae90e6449405f3ec593b6d4bd8136abdcf0520f2ce0db0ad39fdc6db3f4cf3e89bc797c460ac6b9cdfe765bcd528fdc1e4f7d30a7dfdac79c5231c66e1b55aa14c6db55b75a408f91e3d3a985804fa182712571c15e5739df208420643492a356643c1bde2204deff918205c5a29094286532bdbac041ba6f05c8212ff98997fb8e33d4f42748383466246c2dc2d864f33221d46ab4bb5019de7afb06e72bf88a70036b1bc885ebdb6d48d03311819221c36576aefb088ef6d25536bc038947626656a8d381c096e67a2c8233c1383cbc38d74ff29678853f0e765b8eaa8617aee21731c1dc55310975182a250253ca15f604a70e5011fe87e5e280aa470942fe92e4f1f088e2d99473d5881a9273fb769d3ad71f495a098d4356118fafc4093ff206486a918b3e683149acaa62aff51394c628f4002505b55fd4dcfe8a6791c6623d72153b0f31f08370e41e610544b0d364ed203be3c14d93e0a7dd4332de0851a6401265da2e067b0676ab200000000000000000000000000000000000000000000000000000000000000bf000000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000006828c41000000000000000000000000000000000000000000000000000000000682a626a00000000000000000000000000000000671b2c96b238c3a2f4b365f868d0609c000000000000000000000000000000007de40b3bbdc244370200000000000000000000000000000000000000000000000000000000000000000000000000202c",
	})
	if err != nil {
		t.Fatal(err)
	}
	t.Log(proof)
	wit, err := plonk.ValueOfWitness[sw_bn254.ScalarField](proof.Witness)
	if err != nil {
		t.Fatal(err)
	}
	//000000000040b826f721320e2534db6f2eafacb04de2791e77634c32ad779f9f
	elems := wit.Public[levelcommon.OffsetOutHash : levelcommon.OffsetOutHash+levelcommon.CountHash]
	hash := getLinkedIdHash(elems)
	t.Logf("%x\n", hash)

}

func TestTxWitness(t *testing.T) {
	proof, err := HexToProof(rpc.Proof{
		Proof:   "aface4fc1543f6ec48e1505265a9bedbdaaccd2b3d7204fcbc0e387181e6367fcf95a4be8bf5dd695da2064dab5f1db1e006c305730d04724f85510743b8819be1c4a33ef073a11cf8c002c2e50d58652d1c6b0e7162b0b8b259370857bdee3c93fc306b7ef5a343da1cefae16959f077843df965e1039106ed4a20c5d61dcb8d8ec5ae4ba33d5e4fafaaa348e12a3de3364a94b0d250f1cf31db93f33e108328673b7b9b4fd0a86dfada24a6181d846bba0f5e8360b9a597ee6edcdc27d2c01895eb0e405192a9aac3ddab5b0cde8eb28f8688d187160cd751ffd1abf1bc2c59958ac282a7abb9754427e12ca36ab551c22b4bdc04255bfd91c153a110cce9f000000072bf771730d2f2c2d857c174dd4d5e47a6c77bdbb9f4c9df902468ca0cb39fcfe21ce1ed14dcf9bb8c37c3c486d84e7818eba75cd1da2d0f2efd82435892e381403c1efb25170918d7881c131b642db0f4c7c2c17f06b366e40ae84a74c4fbe170e5a88ebedba21fce88ffb9d33ba7087a64ec1c79433134f0b9fc892c736eaab0474d08368739f79d5a03e92ab3220829728af22807c748b88d102d44ece69cb257c9cc14efa2679bcce74548030deb0703fc17570e4ef6158309b5c2bbb23190a5bd6de699a35c50c1344ec31e588a2a24f415ca67e9ee645197ec8416d06fda3f3ee1d0b986ab128d44117b942824db36f097c45d8808d68478f42acb4e5d30fe118bf04536adfb072aa765ef280d8c3ceadf33619dbc05d29c5c2a68e27dd00000001a8076a2d73d42edf7fca0a23533a8c325ef2e11fc909c0a5a12eba153d7fb977",
		Witness: "0000001f000000000000001f000000000000000000000000000000001d295d252016197ca6ce9bba7116b59f00000000000000000000000000000000c626e198fe3b0452af4f6db500000000000000000000000000000000000000007ffea3559eb09f57c267f2fcf93d4bb900000000000000000000000000000000c05f29a8b8b3564249eb185f0000000001b92c8a49ea5831fc1393afa650c9caa9020e0b8a8afedc842dfa258e7c01a02fe0e9d7bd4ed3c1228ccebd882de76c65d5cb43fd60b8789263e411991a156b2e2adc0fb648a66a932011b9801bea213c1c3e88ec9b741d7692da5f71cdddae132fdf03b20d92069ed446a0ca750bf8c94cbd6c337decbca28e25393eb0c9cf0a6b8dd8c32eb15b4becdaa44198bd871c503d84c16cf9a7c57e199e4bb92baa2cfaba7ea4772f98bcaf9d8d24e007cf552303f27c5c39ec34f0b732b23627b012acb4058260d92611730562ec2d8a6516a005ae90e6449405f3ec593b6d4bd8136abdcf0520f2ce0db0ad39fdc6db3f4cf3e89bc797c460ac6b9cdfe765bcd528fdc1e4f7d30a7dfdac79c5231c66e1b55aa14c6db55b75a408f91e3d3a985804fa182712571c15e5739df208420643492a356643c1bde2204deff918205c5a29094286532bdbac041ba6f05c8212ff98997fb8e33d4f42748383466246c2dc2d864f33221d46ab4bb5019de7afb06e72bf88a70036b1bc885ebdb6d48d03311819221c36576aefb088ef6d25536bc038947626656a8d381c096e67a2c8233c1383cbc38d74ff29678853f0e765b8eaa8617aee21731c1dc55310975182a250253ca15f604a70e5011fe87e5e280aa470942fe92e4f1f088e2d99473d5881a9273fb769d3ad71f495a098d4356118fafc4093ff206486a918b3e683149acaa62aff51394c628f4002505b55fd4dcfe8a6791c6623d72153b0f31f08370e41e610544b0d364ed203be3c14d93e0a7dd4332de0851a6401265da2e067b0676ab200000000000000000000000000000000000000000000000000000000000000ff00000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d000000000000000000000000000000000000000000000000000000006815a0cd000000000000000000000000000000000000000000000000000000006826f99700000000000000000000000000000000671b2c96b238c3a2f4b365f868d0609c000000000000000000000000000000007de40b3bbdc2443702000000000000000000000000000000000000000000000000000000000000000000000000001ee1",
	})
	if err != nil {
		panic(err)
	}
	wit, err := plonk.ValueOfWitness[sw_bn254.ScalarField](proof.Witness)
	if err != nil {
		panic(err)
	}
	//000000000c76d75a8819a02edb70c7257efa80143d5dfa2e1fe7e8f03c33b09f
	//000000005f18eb494256b3b8a8295fc0b94b3df9fcf267c2579fb09e55a3fe7f
	elems := wit.Public[levelcommon.OffsetOutHash : levelcommon.OffsetOutHash+levelcommon.CountHash]
	hash := getLinkedIdHash(elems)
	t.Logf("%x\n", hash)

}
