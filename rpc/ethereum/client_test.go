package ethereum

import (
	"bytes"
	"context"
	"crypto/ecdsa"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"log"
	"math/big"
	"strconv"
	"strings"
	"testing"
	"time"

	ethcommon "github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/lightec-xyz/daemon/common"
	"github.com/lightec-xyz/daemon/logger"
	btctx "github.com/lightec-xyz/daemon/transaction/bitcoin"
)

var err error
var client *Client

// var endpoint = "https://1rpc.io/54japjRWgXHfp58ud/sepolia"
var endpoint = "https://1rpc.io/holesky"

// var endpoint = "http://127.0.0.1:8970"
var zkBridgeAddr = "0xa7becea4ce9040336d7d4aad84e684d1daeabea1"
var zkBtcAddr = "0x5898953ff9c1c11a8a6bc578bd6c93aabcd1f083"

func init() {
	//https://sepolia.publicgoods.network
	client, err = NewClient(endpoint, zkBridgeAddr, zkBtcAddr)
	if err != nil {
		panic(err)
	}
}

func TestClient_Number(t *testing.T) {
	number, err := client.BlockNumber(context.Background())
	if err != nil {
		t.Fatal(err)
	}
	t.Log(number)
}

func TestClient_GetLogs2(t *testing.T) {
	logs, err := client.GetLogs("", nil, nil)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(logs)
}

func TestClient_GetPendingNonce(t *testing.T) {
	nonce, err := client.GetPendingNonce("0x771815eFD58e8D6e66773DB0bc002899c00d5b0c")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(nonce)
}

func TestClient_GetEstimateGasLimit(t *testing.T) {
	gasLimit, err := client.GetEstimateGasLimit(
		"0x771815eFD58e8D6e66773DB0bc002899c00d5b0c",
		"0xbdfb7b89e9c77fe647ac1628416773c143ca4b51",
		"c937229bbd89dadb76e6f7285220e765c6e195b553cf0df6cd3e7505077df970",
		1,
		big.NewInt(9000000),
		[]byte("wo heni"),
	)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(gasLimit)
}

func TestClient_ZkbtcBalance(t *testing.T) {
	balance, err := client.GetZkBtcBalance("0x771815eFD58e8D6e66773DB0bc002899c00d5b0c")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(balance)
}

func TestClient_TestEth(t *testing.T) {
	numb := big.NewInt(1245780)
	// result, err := client.HeaderByNumber(context.Background(), numb)
	result, err := client.BlockByNumber(context.Background(), numb)
	if err != nil {
		t.Fatal(err)
	}
	marshal, err := json.Marshal(result)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(string(marshal))
}

func TestClient_BlockNumber(t *testing.T) {
	result, err := client.GetBlock(607368)
	if err != nil {
		t.Fatal(err)
	}
	marshal, err := json.Marshal(result.Transactions())
	if err != nil {
		t.Fatal(err)
	}
	t.Log(string(marshal))

}

func TestClient_GetLogs(t *testing.T) {
	//563180
	//563166
	block, err := client.GetBlock(607368)
	if err != nil {
		t.Fatal(err)
	}
	//t.Log(block)
	address := []string{"0x3ca427befe5b8b821c09a8d6425fbcee20f952f6", "0x96ffb80f74a646940569b599039e0fbd0b3a4711"}
	topic := []string{"0x975dbbd59299029fdfc12db336ede29e2e2b2d117effa1a45be55f0b4f9cfbce", "0xb28ad0403b0a341130002b9eef334c5daa3c1002a73dd90d4626f7079d0a804a"}
	logs, err := client.GetLogs(block.Hash().Hex(),
		address, topic)
	if err != nil {
		t.Fatal(err)
	}
	//t.Log(logs)
	for _, log := range logs {
		if log.TxHash.String() == "0x224c1c5834fd325da4dea93bdc68f2e09716910be6e10b30f60a1cf345c8a31a" {
			t.Log(log.Address.Hex(), log.Address.String(), log.Index, log.Topics, fmt.Sprintf("%x", log.Data))
			parseEthRedeem(log)

		}

	}
}

func parseEthRedeem(log types.Log) (interface{}, error) {
	btcTxId := strings.ToLower(log.Topics[1].Hex())
	if len(log.Data) <= 64 {
		return nil, nil
	}

	dataLength := log.Data[32:64]
	l, err := strconv.ParseInt(fmt.Sprintf("%x", dataLength), 16, 32)
	if err != nil {
		logger.Error("parse data length error:%v", err)
		return nil, err
	}
	txData := log.Data[64 : 64+l+1]
	transaction := btctx.NewTransaction()
	err = transaction.Deserialize(bytes.NewReader(txData))
	if err != nil {
		logger.Error("deserialize btc tx error:%v", err)
		return nil, err
	}
	fmt.Println(btcTxId)
	fmt.Println(transaction.TxHash().String())
	return nil, nil
}

func TestPrivateKey(t *testing.T) {
	privateKey, err := crypto.GenerateKey()
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("%x \n", privateKey.D.Bytes())
	publicKey := privateKey.Public()
	publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
	if !ok {
		log.Fatal("fail")
	}
	address := crypto.PubkeyToAddress(*publicKeyECDSA).Hex()
	t.Log(address)

}

func TestRedeemTx(t *testing.T) {
	privateKey := "c0781e4ca498e0ad693751bac014c0ab00c2841f28903e59cdfe1ab212438e49"
	redeemAmount := big.NewInt(2199999800)
	minerFee := big.NewInt(300)

	fromAddr := "0x771815eFD58e8D6e66773DB0bc002899c00d5b0c"
	balance, err := client.GetZkBtcBalance(fromAddr)
	if err != nil {
		t.Fatal(err)
	}
	if balance.Cmp(big.NewInt(10000)) < 0 {
		t.Fatal("not enough balance")
	}

	redeemLockScript, err := hex.DecodeString("0014d7fae4fbdc8bf6c86a08c7177c5d06683754ea71")
	if err != nil {
		t.Fatal(err)
	}
	from := ethcommon.HexToAddress(fromAddr)
	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()
	gasLimit := 500000
	gasPrice, err := client.SuggestGasPrice(ctx)
	if err != nil {
		t.Fatal(err)
	}
	gasPrice = big.NewInt(0).Mul(big.NewInt(2), gasPrice)
	chainID, err := client.ChainID(ctx)
	if err != nil {
		t.Fatal(err)
	}
	nonce, err := client.NonceAt(ctx, from, nil)
	if err != nil {
		t.Fatal(err)
	}
	txhash, err := client.Redeem(privateKey, uint64(gasLimit), chainID, big.NewInt(int64(nonce)), gasPrice, redeemAmount, minerFee, redeemLockScript)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(txhash)
}

func TestDepositeTransaction(t *testing.T) {
	privateKey := "c0781e4ca498e0ad693751bac014c0ab00c2841f28903e59cdfe1ab212438e49"
	txId := "31917fbc5da25a5db50a084dcfa4b72c04413e570d60bca338eca1cac70bbb28"
	//ethAddr := "0x771815eFD58e8D6e66773DB0bc002899c00d5b0c"
	index := uint32(1)
	amount := big.NewInt(12390000000)
	proof := common.ZkProof([]byte("test proof"))
	from := ethcommon.HexToAddress("0x771815eFD58e8D6e66773DB0bc002899c00d5b0c")
	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()
	gasLimit := 500000
	gasPrice, err := client.SuggestGasPrice(ctx)
	if err != nil {
		t.Fatal(err)
	}
	gasPrice = big.NewInt(0).Mul(big.NewInt(2), gasPrice)
	chainID, err := client.ChainID(ctx)
	if err != nil {
		t.Fatal(err)
	}
	nonce, err := client.NonceAt(ctx, from, nil)
	if err != nil {
		t.Fatal(err)
	}
	txHash, err := client.Deposit(privateKey, txId, "", index,
		nonce, uint64(gasLimit), chainID, gasPrice, amount, proof)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(txHash)
}

func TestUpdateUtxoChange(t *testing.T) {
	privateKey := "c0781e4ca498e0ad693751bac014c0ab00c2841f28903e59cdfe1ab212438e49"
	txId := "0xd32b0bc770512f49884b1e0e409c2010989c6fc7d76e4e495544a5cdb6cd9f49"
	//ethAddr := "0x771815eFD58e8D6e66773DB0bc002899c00d5b0c"
	proofBytes := []byte("test proof")
	from := ethcommon.HexToAddress("0x771815eFD58e8D6e66773DB0bc002899c00d5b0c")
	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()
	gasLimit := 500000
	gasPrice, err := client.SuggestGasPrice(ctx)
	if err != nil {
		t.Fatal(err)
	}
	gasPrice = big.NewInt(0).Mul(big.NewInt(2), gasPrice)
	chainID, err := client.ChainID(ctx)
	if err != nil {
		t.Fatal(err)
	}
	nonce, err := client.NonceAt(ctx, from, nil)
	if err != nil {
		t.Fatal(err)
	}
	txHash, err := client.UpdateUtxoChange(privateKey, []string{txId},
		nonce, uint64(gasLimit), chainID, gasPrice, proofBytes)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(txHash)
}

func TestClient_Demo(t *testing.T) {
	ids := TxIdsToFixedIds([]string{"adddd", "dsdsfsd"})
	t.Log(ids)

}

func TestGetTrancaction(t *testing.T) {
	hash := ethcommon.HexToHash("0x9bd7ff0aa08611a2077189fcefb5095eda2e5d28d175cde410540ecc4ec2283b")
	tx, err := client.TransactionReceipt(context.Background(), hash)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(tx.BlockNumber)
}

func TestClient_Verify(t *testing.T) {
	verify, err := client.Verify("026e17cd91f99f5474aa7f078b2f5ce8af9ac3a34d7709bb46e48a64d145b27a1e0828e53c1ee617994c5adc94544f64141a17af88eb23069378e4273f294c091e2885d7942a1bffb0afe2ea2f3d17a68aea4ee2a9226893dcd35da972451e3c24f507810164f600c4f04ff2d41f759559020099f6844dcea4102baed42bd813022b70dcffdbdb231d666f8001bcced57f6473bda96dbc5a0c3cfc46f7aea7a209268b5af834c203d0aeb94dc27491fff40a9621735b8da2eddc537406903b671bc739d03c9e21afb4ca2c460bba5db1e7ef1f0448086ede52bef2aca933de981fdd9861bfe79673042bee08e882733f63cd494e1d01e0a4bf726565f9a20b4f045e27fdc79f774f658c4318d095c7e4e90097222e897fcb96f7045398046ad01373c30a917330cb27e06956239de255ed2af23efc5d1277d235a5d068b158982f5e819b08671a893c47c8cd5f87b58c02315a7ebb232658bdc2400b24570b060f31fa8315c185f446b58e7f953c8a57feed41dbdb5fddf159a03a8c516ba28f1cd2c07f030e6f8ae247abd9f6b73e8f0811b2f6764eba9db58aea7ae7bcffa6155946471b2ec0ef3fbf737a947054ff7a4616dc2d7ba43f2259019b0ec092d91abc7bb05a1799a74cc9b30b2f2d913d4cce1d2f9d87f6e24a60078599be4825023ffe0567715f4ab7c35507ad74b6e66c791bf3fc6a547788bee8cfd9db2b6d1bdaf52f4cfdd11fd05f05a797e9ecab2e56b317ab139ce1f40e5deb5fea247008890e1d0ae575bc93cee6bd486b920cd74bdeda2f890059e7e9c69c480a161104cd1e97c6b4c38abe85975dbeae7d0f9c487c90680296877b9312a81a1628171185074e53188ffabd0c8c99eb67c1450c137d352665b2d30ac17c9f49dfea8b2d4adcf5132052aecfe9e78c8fca45d5848e0ff740aca2dc509a1b03860f498c0d7efb5ccee6508a7ea2b70dbbd72657b6889eefee0084ecaf3b4e383f89d5352b92bfdd2db6e97535274b5f0648ef7b39382e1d3ec64edd46cf100e31f0e6610e302b05f1c6c1bdb35845beec91dad1d5818d37e93fec2724f6ab53e72453f60f1b663c5cf124db5a5b5d71d8b4fbb613ba51df0b35c4706eb96d360cf4337b000784b66eb43f00deee4bbd3b73ba39489575d92ed8394b9994260c00071dbf2791dc4b04c1cdbe9305fe3d0d8957471be0b286a8b8208f0777b04f6ad2f6021c2e66b063b4ec5ea4bad3d641b2b2edabab9a0294f4e0f999a400a0e036751c08a3295332c379d0b4179e1312d4fdd38e235ce90dea4fdafcd53bdce66c0ea0",
		"2000008000000000000000800000000000000000000000000000000002f9011282426803843b9aca00843b9a00000000000000000000000000000000ca1483062a4e944f413972ab2d4e5371000000000000000000000000000000004a479db1519ce0e89ea30c80b8a4044900000000000000000000000000000000015a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160014a8a337fbfd692a5628e96d4400000000000000000000000000000000684b9ee35d9e913e0000000000000000000000000000000000000000000000000000c080a06cb9b0e642192c16e9d1db000000000000000000000000000000009b87f69e3fa45472081d6ce8581e82f0000000000000000000000000000000003a2635c885a02732300b72743c85d06f000000000000000000000000000000006e8cf600bb0cc2db0c4ee0d84b8fe2f10000000000000000000000000000000054d84a87e5d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002f904610183139951bf90356f8000000000000000000000000000000009b94bf3041e37be70a58920a6fd77666000000000000000000000000000000002b50323021c9f863a0ddf252ad1be2c8000000000000000000000000000000009b69c2b068fc378daa952ba7f163c4a1000000000000000000000000000000001628f55a4df523b3efa0000000000000000000000000000000000000000000000000000000005eed85149d7c3d74d28c000000000000000000000000000000009b164b210a20e749199ca000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004076f89b94bf000000000000000000000000000000003041e37be70a58920a6fd776662b5032000000000000000000000000000000003021c9f863a0ddf252ad1be2c89b69c200000000000000000000000000000000b068fc378daa952ba7f163c4a11628f5000000000000000000000000000000005a4df523b3efa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000003fe784e30d12078391a01d00000000000000000000000000000000a98709ddd00d9797a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080f89b940ebe0e5600000000000000000000000000000000b6b106763bbed1da30a4d6fc6064eada00000000000000000000000000000000f863a0ddf252ad1be2c89b69c2b068fc00000000000000000000000000000000378daa952ba7f163c4a11628f55a4df50000000000000000000000000000000023b3efa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000005eed85149d7c3d74d28c9b164b210a0000000000000000000000000000000020e749199ca00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009502f900000f9017c944f413972ab2d000000000000000000000000000000004e53714a479db1519ce0e89ea30cf84200000000000000000000000000000000a01e5e2baa6d11cc5bcae8c0d1187d7b000000000000000000000000000000009ebf13d6d9b932f7dbbf4e396438845f00000000000000000000000000000000b8a001ef2ad8b42216e4dda1e5a81fbe00000000000000000000000000000000e3e1562d525ec3257666f0e88c7e3b3e00000000000000000000000000000000d9b2b9012000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007d02000000015236bb76624d0000000000000000000000000000000087941d5473660841608bbd213bc91a1700000000000000000000000000000000271b83a224b13c67d1cd0000000000ff00000000000000000000000000000000ffffff02003e000000000000160014a800000000000000000000000000000000a337fbfd692a5628e96d44684b9ee35d000000000000000000000000000000009e913eaa0d000000000000220020592000000000000000000000000000000000637856dee93711f762b72324791ee032000000000000000000000000000000002992811087e41d739c1d2095bfeb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000179fe3d59c81b94608bc7d1000000000000000000000000000000000945f12de2fd7ddeacf3b33ac2854e5f00000000000000000000000000000000dd2d8dcb3a668c093bf582749a3d3fc8d4e69300000000000000000000000000000000214bad9ab8d65ee90c1d4f9933cec1b8")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(verify)
}
