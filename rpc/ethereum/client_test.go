package ethereum

import (
	"bytes"
	"context"
	"crypto/ecdsa"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"log"
	"math/big"
	"strconv"
	"strings"
	"testing"
	"time"

	ethcommon "github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/lightec-xyz/daemon/common"
	"github.com/lightec-xyz/daemon/logger"
	btctx "github.com/lightec-xyz/daemon/transaction/bitcoin"
)

var err error
var client *Client

// var endpoint = "https://1rpc.io/54japjRWgXHfp58ud/sepolia"
var endpoint = "https://1rpc.io/holesky"

// var endpoint = "http://127.0.0.1:8970"
var zkBridgeAddr = "0xa7becea4ce9040336d7d4aad84e684d1daeabea1"
var zkBtcAddr = "0x5898953ff9c1c11a8a6bc578bd6c93aabcd1f083"

func init() {
	//https://sepolia.publicgoods.network
	client, err = NewClient(endpoint, zkBridgeAddr, zkBtcAddr)
	if err != nil {
		panic(err)
	}
}

func TestClient_Number(t *testing.T) {
	number, err := client.BlockNumber(context.Background())
	if err != nil {
		t.Fatal(err)
	}
	t.Log(number)
}

func TestClient_GetLogs2(t *testing.T) {
	logs, err := client.GetLogs("", nil, nil)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(logs)
}

func TestClient_GetPendingNonce(t *testing.T) {
	nonce, err := client.GetPendingNonce("0x771815eFD58e8D6e66773DB0bc002899c00d5b0c")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(nonce)
}

func TestClient_GetEstimateGasLimit(t *testing.T) {
	gasLimit, err := client.GetEstimateGasLimit(
		"0x771815eFD58e8D6e66773DB0bc002899c00d5b0c",
		"0xbdfb7b89e9c77fe647ac1628416773c143ca4b51",
		"c937229bbd89dadb76e6f7285220e765c6e195b553cf0df6cd3e7505077df970",
		1,
		big.NewInt(9000000),
		[]byte("wo heni"),
	)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(gasLimit)
}

func TestClient_ZkbtcBalance(t *testing.T) {
	balance, err := client.GetZkBtcBalance("0x771815eFD58e8D6e66773DB0bc002899c00d5b0c")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(balance)
}

func TestClient_TestEth(t *testing.T) {
	numb := big.NewInt(1245780)
	// result, err := client.HeaderByNumber(context.Background(), numb)
	result, err := client.BlockByNumber(context.Background(), numb)
	if err != nil {
		t.Fatal(err)
	}
	marshal, err := json.Marshal(result)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(string(marshal))
}

func TestClient_BlockNumber(t *testing.T) {
	result, err := client.GetBlock(607368)
	if err != nil {
		t.Fatal(err)
	}
	marshal, err := json.Marshal(result.Transactions())
	if err != nil {
		t.Fatal(err)
	}
	t.Log(string(marshal))

}

func TestClient_GetLogs(t *testing.T) {
	//563180
	//563166
	block, err := client.GetBlock(607368)
	if err != nil {
		t.Fatal(err)
	}
	//t.Log(block)
	address := []string{"0x3ca427befe5b8b821c09a8d6425fbcee20f952f6", "0x96ffb80f74a646940569b599039e0fbd0b3a4711"}
	topic := []string{"0x975dbbd59299029fdfc12db336ede29e2e2b2d117effa1a45be55f0b4f9cfbce", "0xb28ad0403b0a341130002b9eef334c5daa3c1002a73dd90d4626f7079d0a804a"}
	logs, err := client.GetLogs(block.Hash().Hex(),
		address, topic)
	if err != nil {
		t.Fatal(err)
	}
	//t.Log(logs)
	for _, log := range logs {
		if log.TxHash.String() == "0x224c1c5834fd325da4dea93bdc68f2e09716910be6e10b30f60a1cf345c8a31a" {
			t.Log(log.Address.Hex(), log.Address.String(), log.Index, log.Topics, fmt.Sprintf("%x", log.Data))
			parseEthRedeem(log)

		}

	}
}

func parseEthRedeem(log types.Log) (interface{}, error) {
	btcTxId := strings.ToLower(log.Topics[1].Hex())
	if len(log.Data) <= 64 {
		return nil, nil
	}

	dataLength := log.Data[32:64]
	l, err := strconv.ParseInt(fmt.Sprintf("%x", dataLength), 16, 32)
	if err != nil {
		logger.Error("parse data length error:%v", err)
		return nil, err
	}
	txData := log.Data[64 : 64+l+1]
	transaction := btctx.NewTransaction()
	err = transaction.Deserialize(bytes.NewReader(txData))
	if err != nil {
		logger.Error("deserialize btc tx error:%v", err)
		return nil, err
	}
	fmt.Println(btcTxId)
	fmt.Println(transaction.TxHash().String())
	return nil, nil
}

func TestPrivateKey(t *testing.T) {
	privateKey, err := crypto.GenerateKey()
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("%x \n", privateKey.D.Bytes())
	publicKey := privateKey.Public()
	publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
	if !ok {
		log.Fatal("fail")
	}
	address := crypto.PubkeyToAddress(*publicKeyECDSA).Hex()
	t.Log(address)

}

func TestRedeemTx(t *testing.T) {
	privateKey := "c0781e4ca498e0ad693751bac014c0ab00c2841f28903e59cdfe1ab212438e49"
	redeemAmount := big.NewInt(2199999800)
	minerFee := big.NewInt(300)

	fromAddr := "0x771815eFD58e8D6e66773DB0bc002899c00d5b0c"
	balance, err := client.GetZkBtcBalance(fromAddr)
	if err != nil {
		t.Fatal(err)
	}
	if balance.Cmp(big.NewInt(10000)) < 0 {
		t.Fatal("not enough balance")
	}

	redeemLockScript, err := hex.DecodeString("0014d7fae4fbdc8bf6c86a08c7177c5d06683754ea71")
	if err != nil {
		t.Fatal(err)
	}
	from := ethcommon.HexToAddress(fromAddr)
	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()
	gasLimit := 500000
	gasPrice, err := client.SuggestGasPrice(ctx)
	if err != nil {
		t.Fatal(err)
	}
	gasPrice = big.NewInt(0).Mul(big.NewInt(2), gasPrice)
	chainID, err := client.ChainID(ctx)
	if err != nil {
		t.Fatal(err)
	}
	nonce, err := client.NonceAt(ctx, from, nil)
	if err != nil {
		t.Fatal(err)
	}
	txhash, err := client.Redeem(privateKey, uint64(gasLimit), chainID, big.NewInt(int64(nonce)), gasPrice, redeemAmount, minerFee, redeemLockScript)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(txhash)
}

func TestDepositeTransaction(t *testing.T) {
	privateKey := "c0781e4ca498e0ad693751bac014c0ab00c2841f28903e59cdfe1ab212438e49"
	txId := "31917fbc5da25a5db50a084dcfa4b72c04413e570d60bca338eca1cac70bbb28"
	//ethAddr := "0x771815eFD58e8D6e66773DB0bc002899c00d5b0c"
	index := uint32(1)
	amount := big.NewInt(12390000000)
	proof := common.ZkProof([]byte("test proof"))
	from := ethcommon.HexToAddress("0x771815eFD58e8D6e66773DB0bc002899c00d5b0c")
	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()
	gasLimit := 500000
	gasPrice, err := client.SuggestGasPrice(ctx)
	if err != nil {
		t.Fatal(err)
	}
	gasPrice = big.NewInt(0).Mul(big.NewInt(2), gasPrice)
	chainID, err := client.ChainID(ctx)
	if err != nil {
		t.Fatal(err)
	}
	nonce, err := client.NonceAt(ctx, from, nil)
	if err != nil {
		t.Fatal(err)
	}
	txHash, err := client.Deposit(privateKey, txId, "", index,
		nonce, uint64(gasLimit), chainID, gasPrice, amount, proof)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(txHash)
}

func TestUpdateUtxoChange(t *testing.T) {
	privateKey := "c0781e4ca498e0ad693751bac014c0ab00c2841f28903e59cdfe1ab212438e49"
	txId := "0xd32b0bc770512f49884b1e0e409c2010989c6fc7d76e4e495544a5cdb6cd9f49"
	//ethAddr := "0x771815eFD58e8D6e66773DB0bc002899c00d5b0c"
	proofBytes := []byte("test proof")
	from := ethcommon.HexToAddress("0x771815eFD58e8D6e66773DB0bc002899c00d5b0c")
	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()
	gasLimit := 500000
	gasPrice, err := client.SuggestGasPrice(ctx)
	if err != nil {
		t.Fatal(err)
	}
	gasPrice = big.NewInt(0).Mul(big.NewInt(2), gasPrice)
	chainID, err := client.ChainID(ctx)
	if err != nil {
		t.Fatal(err)
	}
	nonce, err := client.NonceAt(ctx, from, nil)
	if err != nil {
		t.Fatal(err)
	}
	txHash, err := client.UpdateUtxoChange(privateKey, []string{txId},
		nonce, uint64(gasLimit), chainID, gasPrice, proofBytes)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(txHash)
}

func TestClient_Demo(t *testing.T) {
	ids := TxIdsToFixedIds([]string{"adddd", "dsdsfsd"})
	t.Log(ids)

}

func TestGetTrancaction(t *testing.T) {
	hash := ethcommon.HexToHash("0x9bd7ff0aa08611a2077189fcefb5095eda2e5d28d175cde410540ecc4ec2283b")
	tx, err := client.TransactionReceipt(context.Background(), hash)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(tx.BlockNumber)
}

func TestClient_Verify(t *testing.T) {
	verify, err := client.Verify("105093fcbf3af7ce6448e434f29c6fdfc11fe68079d0d071ecb7e81ae71e6e23056f47f8cd8f979cd967d7663304280d106877c5104f783e4076bc4ccb59d7812f431c779540e7790a1eb4e56ae30de269d352de76c17a9cca9bbab2711f70001f76399d0641246172da99aeaf4445b28f0f1becb1873efde688eec220b611330578192b9f098693d2270f9db70b9b48e77a7d4e957885eeffeae85ccedfe4850a44a21e641c7f2133ed588459a00584cab091f6d95ea2a1c89f6cdc9825599c0502feb7d480065533cddfa158c4f388a549ae47dbb80de2dd6af9c62ad4e2e21e1a751d5ea2f8091426ee36bc7d8f3fd90884ddb711f162976517bee05a2f3d05cb2ce2838d9b92122b70ec093e78ce3b80a1f74df8e0508fc12e07d330579e116a5fef28a4536e2148a82e5835c147d73469c4fe3f73bdb577620f65dd25f21295dfdf359e9ea2b1e2c9388da23ec65b69e488617425cfecb1485c312531f30fd2dfb05cdd44e8876fca9bd3cf24db2675dc03939b3fcb91c0e5169cf8279611ac5a6a1d011307b420102c8e4dc6b9a3cbcd5ad2a3660c74dab90c7aa0f3320bbba1e301a7bc50e9aa3885d32708ea417a43ee6ccba030000a3831476c33bc20f8fe796a74fb30dde5aa721d52f6fa6c17c04f863b28ebdca9a6e083016cc91472dcc2427d57cd986b6bc5257912615bec3d67d6bd907bcf81e51d60de0979264b35487cd25fc6752460295d2dbdc0f15a4b647e8299f2e287db9022699db508e88872e0bc37c5d2d81d0a76956ad330cfe394babffc8040d8ba154a0e0bd5290895e44971aec5d7caf9d1beff1fdaf4af45790c07e096faff6c35667f85a330055e1edaccfdff2845da85948fa699e961b62e37862a7f66f05b6fd6846f5a09c7f2fd8d72350a757c6bf7b7adef3356f45dcf95262e11fde4093f466af5c11a9bb58a4453584297c8a6d99924f98944661a513878feecdfd4af2162ecf9bd1af0b51a42619e46ab7a3ae533dcf780cb28ac90e1e0fabd8c7c395370f671d10f635ca4ab72f7e6bade1b5d2086410c03f6825b31a5b8ce1d4150d7b38781580d14f76cf054283cf47f566f29bfb3fa02b9b9e1945efe921b248308553b1b92172b88cb1b0b979172ca28fd2ae2f0a4e042e624c49b2dbb9dee1200c9f2eb562fa3f948263a72fe685335cbc8c6776254f54a457fad58b252f770131d8a69f01fb33e25c91385a92e444c7be851514628375dcda72113ba5c1075ee1c31418a068af3e16dde32b0d6c31734e00ad8d876e4365d17d77031d6124e97015137e3",
		"")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(verify)
}
