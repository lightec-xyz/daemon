package ethereum

import (
	"bytes"
	"context"
	"crypto/ecdsa"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"log"
	"math/big"
	"strconv"
	"strings"
	"testing"
	"time"

	ethcommon "github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/lightec-xyz/daemon/common"
	"github.com/lightec-xyz/daemon/logger"
	btctx "github.com/lightec-xyz/daemon/transaction/bitcoin"
)

var err error
var client *Client

// var endpoint = "https://1rpc.io/54japjRWgXHfp58ud/sepolia"
var endpoint = "https://1rpc.io/holesky"

// var endpoint = "http://127.0.0.1:8970"
var zkBridgeAddr = "0xa7becea4ce9040336d7d4aad84e684d1daeabea1"
var zkBtcAddr = "0x5898953ff9c1c11a8a6bc578bd6c93aabcd1f083"

func init() {
	//https://sepolia.publicgoods.network
	client, err = NewClient(endpoint, zkBridgeAddr, zkBtcAddr)
	if err != nil {
		panic(err)
	}
}

func TestClient_Number(t *testing.T) {
	number, err := client.BlockNumber(context.Background())
	if err != nil {
		t.Fatal(err)
	}
	t.Log(number)
}

func TestClient_GetLogs2(t *testing.T) {
	logs, err := client.GetLogs("", nil, nil)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(logs)
}

func TestClient_GetPendingNonce(t *testing.T) {
	nonce, err := client.GetPendingNonce("0x771815eFD58e8D6e66773DB0bc002899c00d5b0c")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(nonce)
}

func TestClient_GetEstimateGasLimit(t *testing.T) {
	gasLimit, err := client.GetEstimateGasLimit(
		"0x771815eFD58e8D6e66773DB0bc002899c00d5b0c",
		"0xbdfb7b89e9c77fe647ac1628416773c143ca4b51",
		"c937229bbd89dadb76e6f7285220e765c6e195b553cf0df6cd3e7505077df970",
		1,
		big.NewInt(9000000),
		[]byte("wo heni"),
	)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(gasLimit)
}

func TestClient_ZkbtcBalance(t *testing.T) {
	balance, err := client.GetZkBtcBalance("0x771815eFD58e8D6e66773DB0bc002899c00d5b0c")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(balance)
}

func TestClient_TestEth(t *testing.T) {
	numb := big.NewInt(1245780)
	// result, err := client.HeaderByNumber(context.Background(), numb)
	result, err := client.BlockByNumber(context.Background(), numb)
	if err != nil {
		t.Fatal(err)
	}
	marshal, err := json.Marshal(result)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(string(marshal))
}

func TestClient_BlockNumber(t *testing.T) {
	result, err := client.GetBlock(607368)
	if err != nil {
		t.Fatal(err)
	}
	marshal, err := json.Marshal(result.Transactions())
	if err != nil {
		t.Fatal(err)
	}
	t.Log(string(marshal))

}

func TestClient_GetLogs(t *testing.T) {
	//563180
	//563166
	block, err := client.GetBlock(607368)
	if err != nil {
		t.Fatal(err)
	}
	//t.Log(block)
	address := []string{"0x3ca427befe5b8b821c09a8d6425fbcee20f952f6", "0x96ffb80f74a646940569b599039e0fbd0b3a4711"}
	topic := []string{"0x975dbbd59299029fdfc12db336ede29e2e2b2d117effa1a45be55f0b4f9cfbce", "0xb28ad0403b0a341130002b9eef334c5daa3c1002a73dd90d4626f7079d0a804a"}
	logs, err := client.GetLogs(block.Hash().Hex(),
		address, topic)
	if err != nil {
		t.Fatal(err)
	}
	//t.Log(logs)
	for _, log := range logs {
		if log.TxHash.String() == "0x224c1c5834fd325da4dea93bdc68f2e09716910be6e10b30f60a1cf345c8a31a" {
			t.Log(log.Address.Hex(), log.Address.String(), log.Index, log.Topics, fmt.Sprintf("%x", log.Data))
			parseEthRedeem(log)

		}

	}
}

func parseEthRedeem(log types.Log) (interface{}, error) {
	btcTxId := strings.ToLower(log.Topics[1].Hex())
	if len(log.Data) <= 64 {
		return nil, nil
	}

	dataLength := log.Data[32:64]
	l, err := strconv.ParseInt(fmt.Sprintf("%x", dataLength), 16, 32)
	if err != nil {
		logger.Error("parse data length error:%v", err)
		return nil, err
	}
	txData := log.Data[64 : 64+l+1]
	transaction := btctx.NewTransaction()
	err = transaction.Deserialize(bytes.NewReader(txData))
	if err != nil {
		logger.Error("deserialize btc tx error:%v", err)
		return nil, err
	}
	fmt.Println(btcTxId)
	fmt.Println(transaction.TxHash().String())
	return nil, nil
}

func TestPrivateKey(t *testing.T) {
	privateKey, err := crypto.GenerateKey()
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("%x \n", privateKey.D.Bytes())
	publicKey := privateKey.Public()
	publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
	if !ok {
		log.Fatal("fail")
	}
	address := crypto.PubkeyToAddress(*publicKeyECDSA).Hex()
	t.Log(address)

}

func TestRedeemTx(t *testing.T) {
	privateKey := "c0781e4ca498e0ad693751bac014c0ab00c2841f28903e59cdfe1ab212438e49"
	redeemAmount := uint64(2199999800)
	minerFee := uint64(300)

	fromAddr := "0x771815eFD58e8D6e66773DB0bc002899c00d5b0c"
	balance, err := client.GetZkBtcBalance(fromAddr)
	if err != nil {
		t.Fatal(err)
	}
	if balance.Cmp(big.NewInt(10000)) < 0 {
		t.Fatal("not enough balance")
	}

	redeemLockScript, err := hex.DecodeString("0014d7fae4fbdc8bf6c86a08c7177c5d06683754ea71")
	if err != nil {
		t.Fatal(err)
	}
	from := ethcommon.HexToAddress(fromAddr)
	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()
	gasLimit := 500000
	gasPrice, err := client.SuggestGasPrice(ctx)
	if err != nil {
		t.Fatal(err)
	}
	gasPrice = big.NewInt(0).Mul(big.NewInt(2), gasPrice)
	chainID, err := client.ChainID(ctx)
	if err != nil {
		t.Fatal(err)
	}
	nonce, err := client.NonceAt(ctx, from, nil)
	if err != nil {
		t.Fatal(err)
	}
	txhash, err := client.Redeem(privateKey, uint64(gasLimit), chainID, big.NewInt(int64(nonce)), gasPrice, redeemAmount, minerFee, redeemLockScript)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(txhash)
}

func TestDepositeTransaction(t *testing.T) {
	privateKey := "c0781e4ca498e0ad693751bac014c0ab00c2841f28903e59cdfe1ab212438e49"
	proof := common.ZkProof([]byte("test proof"))
	from := ethcommon.HexToAddress("0x771815eFD58e8D6e66773DB0bc002899c00d5b0c")
	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()
	gasLimit := 500000
	gasPrice, err := client.SuggestGasPrice(ctx)
	if err != nil {
		t.Fatal(err)
	}
	gasPrice = big.NewInt(0).Mul(big.NewInt(2), gasPrice)
	chainID, err := client.ChainID(ctx)
	if err != nil {
		t.Fatal(err)
	}
	nonce, err := client.NonceAt(ctx, from, nil)
	if err != nil {
		t.Fatal(err)
	}
	txHash, err := client.Deposit(privateKey,
		nonce, uint64(gasLimit), chainID, gasPrice, nil, proof)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(txHash)
}

func TestUpdateUtxoChange(t *testing.T) {
	privateKey := "c0781e4ca498e0ad693751bac014c0ab00c2841f28903e59cdfe1ab212438e49"
	txId := "0xd32b0bc770512f49884b1e0e409c2010989c6fc7d76e4e495544a5cdb6cd9f49"
	//ethAddr := "0x771815eFD58e8D6e66773DB0bc002899c00d5b0c"
	proofBytes := []byte("test proof")
	from := ethcommon.HexToAddress("0x771815eFD58e8D6e66773DB0bc002899c00d5b0c")
	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()
	gasLimit := 500000
	gasPrice, err := client.SuggestGasPrice(ctx)
	if err != nil {
		t.Fatal(err)
	}
	gasPrice = big.NewInt(0).Mul(big.NewInt(2), gasPrice)
	chainID, err := client.ChainID(ctx)
	if err != nil {
		t.Fatal(err)
	}
	nonce, err := client.NonceAt(ctx, from, nil)
	if err != nil {
		t.Fatal(err)
	}
	txHash, err := client.UpdateUtxoChange(privateKey, []string{txId},
		nonce, uint64(gasLimit), chainID, gasPrice, proofBytes)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(txHash)
}

func TestClient_Demo(t *testing.T) {
	ids := TxIdsToFixedIds([]string{"adddd", "dsdsfsd"})
	t.Log(ids)

}

func TestGetTrancaction(t *testing.T) {
	hash := ethcommon.HexToHash("0x9bd7ff0aa08611a2077189fcefb5095eda2e5d28d175cde410540ecc4ec2283b")
	tx, err := client.TransactionReceipt(context.Background(), hash)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(tx.BlockNumber)
}

func TestClient_Verify(t *testing.T) {
	verify, err := client.Verify("094e4f129ab1d9936a1c05a3110babdc06fe68f76f241d9e542b1446457877950ae7680be702c593593c5a6ed59d66b6f843bc7b50a6b7e224ae24bd1f6cc6320104f42075aaa133d2404989e6ca2f02850cbe04435616316f7de0dfd3a7744a2fdf2d98e0852a82f843f2e3165124ccdc96d54a80d8591cb9a3093fc13d7a8f2ee39211333339157b2b11cd9aeaa7ec036d90084a50b82465bb0d78efe64199125d654dca037038a936f464e908652d7f7fb0edcb8a0d07d1eb85b4a872c0282810d765508be48360bd1eeff3eacbc388ba622f2cfe3cc91554e7d7e0c6c7f423c241179ef581988d683104f421c8e38605dc18fb8593ba574c2b6d433b47922a9361f1d4fe16c1a29358d7792ffbd0852d27d4cf85bbff7092f7793713e1a0061f38347ea49c2e04c90fe390b2579b0809f30ca98fa5f9ef786337385da4da172d8ec17d8225f8f8db2977b8c90d4435d6b6f0f3cb65f60777343b9d4d361407000e5e4bea4824bd2c87dcbef94c6828de60697ad86d7bc765bada209a842b05be5c1c5586342693d910d04ed8f4063c2d8391e2fc3ad3cb4d77d785711f312fd9ac69ca37f5d468e981c6273196e42f2af780917d42070d2708e4704861c422cede78eeef11a4fa6709acdac7ea2665b26f0781301601aa9829ef141cadc21128e3faf45612ba8fd65cdd43347ccc8be42f122be3ddcb33df30dd1ab1342d249d1b50daeb5abf39a4a07508194121c8dafc459d0808a434825e9c08c95bff2ed34707d389f11183106f6ea13b2bbc42c3e04128399eb299f929924b79e37c0dfce36db4e52a910c1b62a126b3083f53d69f1fc9f06d445451321340d834c80edfbd8bc17c4f4582c69cdc7dafc2ef1bbffc07c373caaa1b401e1655ea50c62aae0f1bc9ee05df0076afbe9d0b0c279816326d3a1c1b49a6ac86f045760b49081492f0e67c24faecba23bd4d94b27a1b2c52dfb1b402ba916c6355312a8dab0cd35b5fa9953beca60326dacb41e851dfaac18cf14afaabf5aca0620c6c2ecc21cb036556ed926ce626be2f9762cfa935768bf3f434ea56f325e7a33607d2a41a3eca49c0e6e01005f006016f14d9e2dfbe3ee9588ad386d73596f4980cac8d10eaa1df521d695d9317b3e1b5277156857781e03e1c43914ecede2335bac9e8260b1a7775bb5535298508b8bb77da775bea29532e9ebd920492dca9b4ee87640e1c9a2d397a1b23b255680bf48543f342d23196db280b2e05796118537c52881405aa5bfd21843e8bde1d5ab98f3ccd36ba3d832f7307be773243eb0cef4234",
		"")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(verify)
}
