package oasis

import (
	"testing"

	"github.com/ethereum/go-ethereum/common/hexutil"
)

var err error
var client *Client

func init() {
	client, err = NewClient("https://testnet.sapphire.oasis.io",
		"0xd53859C586D0593343842e75E358d5f9E1ca26CE",
	)
	if err != nil {
		panic(err)
	}
}

func TestClient_PublicKey(t *testing.T) {
	publicKey, err := client.PublicKey()
	if err != nil {
		t.Fatal(err)
	}
	for _, item := range publicKey {
		t.Logf("%v\n", hexutil.Encode(item))
	}
}

func TestClient_SignBtcTx(t *testing.T) {
	//    ethereum_test.go:41: rawTx: 0x02f9046101830ac170bf90356f89b6fc88e0745bc
	//    ethereum_test.go:42: rawReceipt: 0x02f9046101830ac170bf90356f89b94bf3041e37be70a58920a6fd776662b50323021c9f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa0000000000000000000000000f6cdfeb7ae943d6d5879c9c9dce84b51f94b9985a00000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000030e0f89b94bf3041e37be70a58920a6fd776662b50323021c9f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000003fe784e30d12078391a01da98709ddd00d9797a00000000000000000000000000000000000000000000000000000000000000060f89b940ebe0e56b6b106763bbed1da30a4d6fc6064eadaf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000f6cdfeb7ae943d6d5879c9c9dce84b51f94b9985a0000000000000000000000000000000000000000000000000000006fc23ac0000f9017c944f413972ab2d4e53714a479db1519ce0e89ea30cf842a01e5e2baa6d11cc5bcae8c0d1187d7b9ebf13d6d9b932f7dbbf4e396438845fb8a044f51ce1115129a44b62467420659e77d1ce7f7ff3190059849951d55c749981b90120000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000007d0200000001b095e7df80a9e758ae67fa9c7d9b8c5464dc41249fffe9b164d4be56b404dfcc0000000000ffffffff02802e00000000000016001464d468d12f61295882b0f8f63c64b58e2af058e4401d0000000000002200207c907704071d036924b69db3b98b683cc405384828b55b1b3d25ffd8d04381bf000000000000000000000000000000000000000000000000000000000000000000000000000001e83a658f2560e61511f20decdf860f61066ba130ced55c7e732a6233d15137a2
	txRaw, err := hexutil.Decode("0x02f9046101830ac170bf90356f89b6fc88e0745bc")
	if err != nil {
		t.Fatal(err)
	}
	receiptRaw, err := hexutil.Decode("0x02f9046101830ac170bf90356f89b94bf3041e37be70a58920a6fd776662b50323021c9f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa0000000000000000000000000f6cdfeb7ae943d6d5879c9c9dce84b51f94b9985a00000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000030e0f89b94bf3041e37be70a58920a6fd776662b50323021c9f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000003fe784e30d12078391a01da98709ddd00d9797a00000000000000000000000000000000000000000000000000000000000000060f89b940ebe0e56b6b106763bbed1da30a4d6fc6064eadaf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000f6cdfeb7ae943d6d5879c9c9dce84b51f94b9985a0000000000000000000000000000000000000000000000000000006fc23ac0000f9017c944f413972ab2d4e53714a479db1519ce0e89ea30cf842a01e5e2baa6d11cc5bcae8c0d1187d7b9ebf13d6d9b932f7dbbf4e396438845fb8a044f51ce1115129a44b62467420659e77d1ce7f7ff3190059849951d55c749981b90120000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000007d0200000001b095e7df80a9e758ae67fa9c7d9b8c5464dc41249fffe9b164d4be56b404dfcc0000000000ffffffff02802e00000000000016001464d468d12f61295882b0f8f63c64b58e2af058e4401d0000000000002200207c907704071d036924b69db3b98b683cc405384828b55b1b3d25ffd8d04381bf000000000000000000000000000000000000000000000000000000000000000000000000000001e83a658f2560e61511f20decdf860f61066ba130ced55c7e732a6233d15137a2")
	if err != nil {
		t.Fatal(err)
	}
	proofData, err := hexutil.Decode("0x00")
	if err != nil {
		t.Fatal(err)
	}
	sigs, err := client.SignBtcTx(txRaw, receiptRaw, proofData)
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("%x\n", sigs)
}
